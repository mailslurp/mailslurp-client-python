# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CreateTotpDeviceOtpAuthUrlOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'otp_auth_url': 'str',
        'name': 'str',
        'username': 'str',
        'issuer': 'str',
        'digits': 'int',
        'period': 'int',
        'algorithm': 'str'
    }

    attribute_map = {
        'otp_auth_url': 'otpAuthUrl',
        'name': 'name',
        'username': 'username',
        'issuer': 'issuer',
        'digits': 'digits',
        'period': 'period',
        'algorithm': 'algorithm'
    }

    def __init__(self, otp_auth_url=None, name=None, username=None, issuer=None, digits=None, period=None, algorithm=None, local_vars_configuration=None):  # noqa: E501
        """CreateTotpDeviceOtpAuthUrlOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._otp_auth_url = None
        self._name = None
        self._username = None
        self._issuer = None
        self._digits = None
        self._period = None
        self._algorithm = None
        self.discriminator = None

        self.otp_auth_url = otp_auth_url
        self.name = name
        self.username = username
        self.issuer = issuer
        self.digits = digits
        self.period = period
        self.algorithm = algorithm

    @property
    def otp_auth_url(self):
        """Gets the otp_auth_url of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501


        :return: The otp_auth_url of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :rtype: str
        """
        return self._otp_auth_url

    @otp_auth_url.setter
    def otp_auth_url(self, otp_auth_url):
        """Sets the otp_auth_url of this CreateTotpDeviceOtpAuthUrlOptions.


        :param otp_auth_url: The otp_auth_url of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and otp_auth_url is None:  # noqa: E501
            raise ValueError("Invalid value for `otp_auth_url`, must not be `None`")  # noqa: E501

        self._otp_auth_url = otp_auth_url

    @property
    def name(self):
        """Gets the name of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501


        :return: The name of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTotpDeviceOtpAuthUrlOptions.


        :param name: The name of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501


        :return: The username of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateTotpDeviceOtpAuthUrlOptions.


        :param username: The username of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def issuer(self):
        """Gets the issuer of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501


        :return: The issuer of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CreateTotpDeviceOtpAuthUrlOptions.


        :param issuer: The issuer of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def digits(self):
        """Gets the digits of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501


        :return: The digits of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :rtype: int
        """
        return self._digits

    @digits.setter
    def digits(self, digits):
        """Sets the digits of this CreateTotpDeviceOtpAuthUrlOptions.


        :param digits: The digits of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :type: int
        """

        self._digits = digits

    @property
    def period(self):
        """Gets the period of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501


        :return: The period of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CreateTotpDeviceOtpAuthUrlOptions.


        :param period: The period of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def algorithm(self):
        """Gets the algorithm of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501


        :return: The algorithm of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this CreateTotpDeviceOtpAuthUrlOptions.


        :param algorithm: The algorithm of this CreateTotpDeviceOtpAuthUrlOptions.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTotpDeviceOtpAuthUrlOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTotpDeviceOtpAuthUrlOptions):
            return True

        return self.to_dict() != other.to_dict()
