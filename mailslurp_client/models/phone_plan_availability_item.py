# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class PhonePlanAvailabilityItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'phone_country': 'str',
        'availability_status': 'str'
    }

    attribute_map = {
        'phone_country': 'phoneCountry',
        'availability_status': 'availabilityStatus'
    }

    def __init__(self, phone_country=None, availability_status=None, local_vars_configuration=None):  # noqa: E501
        """PhonePlanAvailabilityItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._phone_country = None
        self._availability_status = None
        self.discriminator = None

        self.phone_country = phone_country
        self.availability_status = availability_status

    @property
    def phone_country(self):
        """Gets the phone_country of this PhonePlanAvailabilityItem.  # noqa: E501


        :return: The phone_country of this PhonePlanAvailabilityItem.  # noqa: E501
        :rtype: str
        """
        return self._phone_country

    @phone_country.setter
    def phone_country(self, phone_country):
        """Sets the phone_country of this PhonePlanAvailabilityItem.


        :param phone_country: The phone_country of this PhonePlanAvailabilityItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and phone_country is None:  # noqa: E501
            raise ValueError("Invalid value for `phone_country`, must not be `None`")  # noqa: E501
        allowed_values = ["US", "GB", "AU", "CA", "EE", "HK", "PL", "CH", "PT", "NL", "IL", "SE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and phone_country not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `phone_country` ({0}), must be one of {1}"  # noqa: E501
                .format(phone_country, allowed_values)
            )

        self._phone_country = phone_country

    @property
    def availability_status(self):
        """Gets the availability_status of this PhonePlanAvailabilityItem.  # noqa: E501


        :return: The availability_status of this PhonePlanAvailabilityItem.  # noqa: E501
        :rtype: str
        """
        return self._availability_status

    @availability_status.setter
    def availability_status(self, availability_status):
        """Sets the availability_status of this PhonePlanAvailabilityItem.


        :param availability_status: The availability_status of this PhonePlanAvailabilityItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and availability_status is None:  # noqa: E501
            raise ValueError("Invalid value for `availability_status`, must not be `None`")  # noqa: E501
        allowed_values = ["AVAILABLE", "NON_MATCHING_SUBSCRIPTION_CURRENCY", "NON_MATCHING_SUBSCRIPTION_TYPE", "ALREADY_ASSIGNED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and availability_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `availability_status` ({0}), must be one of {1}"  # noqa: E501
                .format(availability_status, allowed_values)
            )

        self._availability_status = availability_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhonePlanAvailabilityItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PhonePlanAvailabilityItem):
            return True

        return self.to_dict() != other.to_dict()
