# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CreateConnectorImapConnectionOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'imap_ssl': 'bool',
        'imap_username': 'str',
        'imap_password': 'str',
        'select_folder': 'str',
        'search_terms': 'str',
        'imap_port': 'int',
        'imap_host': 'str',
        'enabled': 'bool',
        'start_tls': 'bool',
        'proxy_enabled': 'bool',
        'proxy_port': 'int',
        'proxy_host': 'str',
        'local_host_name': 'str',
        'mechanisms': 'list[str]',
        'ssl_trust': 'str',
        'ssl_protocols': 'list[str]'
    }

    attribute_map = {
        'imap_ssl': 'imapSsl',
        'imap_username': 'imapUsername',
        'imap_password': 'imapPassword',
        'select_folder': 'selectFolder',
        'search_terms': 'searchTerms',
        'imap_port': 'imapPort',
        'imap_host': 'imapHost',
        'enabled': 'enabled',
        'start_tls': 'startTls',
        'proxy_enabled': 'proxyEnabled',
        'proxy_port': 'proxyPort',
        'proxy_host': 'proxyHost',
        'local_host_name': 'localHostName',
        'mechanisms': 'mechanisms',
        'ssl_trust': 'sslTrust',
        'ssl_protocols': 'sslProtocols'
    }

    def __init__(self, imap_ssl=None, imap_username=None, imap_password=None, select_folder=None, search_terms=None, imap_port=None, imap_host=None, enabled=None, start_tls=None, proxy_enabled=None, proxy_port=None, proxy_host=None, local_host_name=None, mechanisms=None, ssl_trust=None, ssl_protocols=None, local_vars_configuration=None):  # noqa: E501
        """CreateConnectorImapConnectionOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._imap_ssl = None
        self._imap_username = None
        self._imap_password = None
        self._select_folder = None
        self._search_terms = None
        self._imap_port = None
        self._imap_host = None
        self._enabled = None
        self._start_tls = None
        self._proxy_enabled = None
        self._proxy_port = None
        self._proxy_host = None
        self._local_host_name = None
        self._mechanisms = None
        self._ssl_trust = None
        self._ssl_protocols = None
        self.discriminator = None

        self.imap_ssl = imap_ssl
        self.imap_username = imap_username
        self.imap_password = imap_password
        self.select_folder = select_folder
        self.search_terms = search_terms
        self.imap_port = imap_port
        self.imap_host = imap_host
        self.enabled = enabled
        self.start_tls = start_tls
        self.proxy_enabled = proxy_enabled
        self.proxy_port = proxy_port
        self.proxy_host = proxy_host
        self.local_host_name = local_host_name
        self.mechanisms = mechanisms
        self.ssl_trust = ssl_trust
        self.ssl_protocols = ssl_protocols

    @property
    def imap_ssl(self):
        """Gets the imap_ssl of this CreateConnectorImapConnectionOptions.  # noqa: E501


        :return: The imap_ssl of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._imap_ssl

    @imap_ssl.setter
    def imap_ssl(self, imap_ssl):
        """Sets the imap_ssl of this CreateConnectorImapConnectionOptions.


        :param imap_ssl: The imap_ssl of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: bool
        """

        self._imap_ssl = imap_ssl

    @property
    def imap_username(self):
        """Gets the imap_username of this CreateConnectorImapConnectionOptions.  # noqa: E501


        :return: The imap_username of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: str
        """
        return self._imap_username

    @imap_username.setter
    def imap_username(self, imap_username):
        """Sets the imap_username of this CreateConnectorImapConnectionOptions.


        :param imap_username: The imap_username of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: str
        """

        self._imap_username = imap_username

    @property
    def imap_password(self):
        """Gets the imap_password of this CreateConnectorImapConnectionOptions.  # noqa: E501


        :return: The imap_password of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: str
        """
        return self._imap_password

    @imap_password.setter
    def imap_password(self, imap_password):
        """Sets the imap_password of this CreateConnectorImapConnectionOptions.


        :param imap_password: The imap_password of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: str
        """

        self._imap_password = imap_password

    @property
    def select_folder(self):
        """Gets the select_folder of this CreateConnectorImapConnectionOptions.  # noqa: E501

        Optional folder to select during IMAP connection  # noqa: E501

        :return: The select_folder of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: str
        """
        return self._select_folder

    @select_folder.setter
    def select_folder(self, select_folder):
        """Sets the select_folder of this CreateConnectorImapConnectionOptions.

        Optional folder to select during IMAP connection  # noqa: E501

        :param select_folder: The select_folder of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: str
        """

        self._select_folder = select_folder

    @property
    def search_terms(self):
        """Gets the search_terms of this CreateConnectorImapConnectionOptions.  # noqa: E501


        :return: The search_terms of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: str
        """
        return self._search_terms

    @search_terms.setter
    def search_terms(self, search_terms):
        """Sets the search_terms of this CreateConnectorImapConnectionOptions.


        :param search_terms: The search_terms of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: str
        """

        self._search_terms = search_terms

    @property
    def imap_port(self):
        """Gets the imap_port of this CreateConnectorImapConnectionOptions.  # noqa: E501

        IMAP server port  # noqa: E501

        :return: The imap_port of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: int
        """
        return self._imap_port

    @imap_port.setter
    def imap_port(self, imap_port):
        """Sets the imap_port of this CreateConnectorImapConnectionOptions.

        IMAP server port  # noqa: E501

        :param imap_port: The imap_port of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: int
        """

        self._imap_port = imap_port

    @property
    def imap_host(self):
        """Gets the imap_host of this CreateConnectorImapConnectionOptions.  # noqa: E501

        IMAP server host  # noqa: E501

        :return: The imap_host of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: str
        """
        return self._imap_host

    @imap_host.setter
    def imap_host(self, imap_host):
        """Sets the imap_host of this CreateConnectorImapConnectionOptions.

        IMAP server host  # noqa: E501

        :param imap_host: The imap_host of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and imap_host is None:  # noqa: E501
            raise ValueError("Invalid value for `imap_host`, must not be `None`")  # noqa: E501

        self._imap_host = imap_host

    @property
    def enabled(self):
        """Gets the enabled of this CreateConnectorImapConnectionOptions.  # noqa: E501

        IMAP server enabled  # noqa: E501

        :return: The enabled of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CreateConnectorImapConnectionOptions.

        IMAP server enabled  # noqa: E501

        :param enabled: The enabled of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def start_tls(self):
        """Gets the start_tls of this CreateConnectorImapConnectionOptions.  # noqa: E501


        :return: The start_tls of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._start_tls

    @start_tls.setter
    def start_tls(self, start_tls):
        """Sets the start_tls of this CreateConnectorImapConnectionOptions.


        :param start_tls: The start_tls of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: bool
        """

        self._start_tls = start_tls

    @property
    def proxy_enabled(self):
        """Gets the proxy_enabled of this CreateConnectorImapConnectionOptions.  # noqa: E501


        :return: The proxy_enabled of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._proxy_enabled

    @proxy_enabled.setter
    def proxy_enabled(self, proxy_enabled):
        """Sets the proxy_enabled of this CreateConnectorImapConnectionOptions.


        :param proxy_enabled: The proxy_enabled of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: bool
        """

        self._proxy_enabled = proxy_enabled

    @property
    def proxy_port(self):
        """Gets the proxy_port of this CreateConnectorImapConnectionOptions.  # noqa: E501


        :return: The proxy_port of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: int
        """
        return self._proxy_port

    @proxy_port.setter
    def proxy_port(self, proxy_port):
        """Sets the proxy_port of this CreateConnectorImapConnectionOptions.


        :param proxy_port: The proxy_port of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: int
        """

        self._proxy_port = proxy_port

    @property
    def proxy_host(self):
        """Gets the proxy_host of this CreateConnectorImapConnectionOptions.  # noqa: E501


        :return: The proxy_host of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: str
        """
        return self._proxy_host

    @proxy_host.setter
    def proxy_host(self, proxy_host):
        """Sets the proxy_host of this CreateConnectorImapConnectionOptions.


        :param proxy_host: The proxy_host of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: str
        """

        self._proxy_host = proxy_host

    @property
    def local_host_name(self):
        """Gets the local_host_name of this CreateConnectorImapConnectionOptions.  # noqa: E501


        :return: The local_host_name of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: str
        """
        return self._local_host_name

    @local_host_name.setter
    def local_host_name(self, local_host_name):
        """Sets the local_host_name of this CreateConnectorImapConnectionOptions.


        :param local_host_name: The local_host_name of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: str
        """

        self._local_host_name = local_host_name

    @property
    def mechanisms(self):
        """Gets the mechanisms of this CreateConnectorImapConnectionOptions.  # noqa: E501

        List of IMAP mechanisms  # noqa: E501

        :return: The mechanisms of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._mechanisms

    @mechanisms.setter
    def mechanisms(self, mechanisms):
        """Sets the mechanisms of this CreateConnectorImapConnectionOptions.

        List of IMAP mechanisms  # noqa: E501

        :param mechanisms: The mechanisms of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: list[str]
        """

        self._mechanisms = mechanisms

    @property
    def ssl_trust(self):
        """Gets the ssl_trust of this CreateConnectorImapConnectionOptions.  # noqa: E501


        :return: The ssl_trust of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: str
        """
        return self._ssl_trust

    @ssl_trust.setter
    def ssl_trust(self, ssl_trust):
        """Sets the ssl_trust of this CreateConnectorImapConnectionOptions.


        :param ssl_trust: The ssl_trust of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: str
        """

        self._ssl_trust = ssl_trust

    @property
    def ssl_protocols(self):
        """Gets the ssl_protocols of this CreateConnectorImapConnectionOptions.  # noqa: E501

        List of SSL protocols  # noqa: E501

        :return: The ssl_protocols of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._ssl_protocols

    @ssl_protocols.setter
    def ssl_protocols(self, ssl_protocols):
        """Sets the ssl_protocols of this CreateConnectorImapConnectionOptions.

        List of SSL protocols  # noqa: E501

        :param ssl_protocols: The ssl_protocols of this CreateConnectorImapConnectionOptions.  # noqa: E501
        :type: list[str]
        """

        self._ssl_protocols = ssl_protocols

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateConnectorImapConnectionOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateConnectorImapConnectionOptions):
            return True

        return self.to_dict() != other.to_dict()
