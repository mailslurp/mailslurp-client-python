# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ConnectorImapConnectionDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connector_id': 'str',
        'imap_host': 'str',
        'imap_port': 'int',
        'imap_username': 'str',
        'imap_password': 'str',
        'imap_ssl': 'bool',
        'select_folder': 'str',
        'search_terms': 'str',
        'enabled': 'bool',
        'created_at': 'datetime',
        'id': 'str'
    }

    attribute_map = {
        'connector_id': 'connectorId',
        'imap_host': 'imapHost',
        'imap_port': 'imapPort',
        'imap_username': 'imapUsername',
        'imap_password': 'imapPassword',
        'imap_ssl': 'imapSsl',
        'select_folder': 'selectFolder',
        'search_terms': 'searchTerms',
        'enabled': 'enabled',
        'created_at': 'createdAt',
        'id': 'id'
    }

    def __init__(self, connector_id=None, imap_host=None, imap_port=None, imap_username=None, imap_password=None, imap_ssl=None, select_folder=None, search_terms=None, enabled=None, created_at=None, id=None, local_vars_configuration=None):  # noqa: E501
        """ConnectorImapConnectionDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._connector_id = None
        self._imap_host = None
        self._imap_port = None
        self._imap_username = None
        self._imap_password = None
        self._imap_ssl = None
        self._select_folder = None
        self._search_terms = None
        self._enabled = None
        self._created_at = None
        self._id = None
        self.discriminator = None

        self.connector_id = connector_id
        if imap_host is not None:
            self.imap_host = imap_host
        if imap_port is not None:
            self.imap_port = imap_port
        if imap_username is not None:
            self.imap_username = imap_username
        if imap_password is not None:
            self.imap_password = imap_password
        if imap_ssl is not None:
            self.imap_ssl = imap_ssl
        if select_folder is not None:
            self.select_folder = select_folder
        if search_terms is not None:
            self.search_terms = search_terms
        if enabled is not None:
            self.enabled = enabled
        self.created_at = created_at
        self.id = id

    @property
    def connector_id(self):
        """Gets the connector_id of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The connector_id of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this ConnectorImapConnectionDto.


        :param connector_id: The connector_id of this ConnectorImapConnectionDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_id is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_id`, must not be `None`")  # noqa: E501

        self._connector_id = connector_id

    @property
    def imap_host(self):
        """Gets the imap_host of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The imap_host of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: str
        """
        return self._imap_host

    @imap_host.setter
    def imap_host(self, imap_host):
        """Sets the imap_host of this ConnectorImapConnectionDto.


        :param imap_host: The imap_host of this ConnectorImapConnectionDto.  # noqa: E501
        :type: str
        """

        self._imap_host = imap_host

    @property
    def imap_port(self):
        """Gets the imap_port of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The imap_port of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: int
        """
        return self._imap_port

    @imap_port.setter
    def imap_port(self, imap_port):
        """Sets the imap_port of this ConnectorImapConnectionDto.


        :param imap_port: The imap_port of this ConnectorImapConnectionDto.  # noqa: E501
        :type: int
        """

        self._imap_port = imap_port

    @property
    def imap_username(self):
        """Gets the imap_username of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The imap_username of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: str
        """
        return self._imap_username

    @imap_username.setter
    def imap_username(self, imap_username):
        """Sets the imap_username of this ConnectorImapConnectionDto.


        :param imap_username: The imap_username of this ConnectorImapConnectionDto.  # noqa: E501
        :type: str
        """

        self._imap_username = imap_username

    @property
    def imap_password(self):
        """Gets the imap_password of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The imap_password of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: str
        """
        return self._imap_password

    @imap_password.setter
    def imap_password(self, imap_password):
        """Sets the imap_password of this ConnectorImapConnectionDto.


        :param imap_password: The imap_password of this ConnectorImapConnectionDto.  # noqa: E501
        :type: str
        """

        self._imap_password = imap_password

    @property
    def imap_ssl(self):
        """Gets the imap_ssl of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The imap_ssl of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: bool
        """
        return self._imap_ssl

    @imap_ssl.setter
    def imap_ssl(self, imap_ssl):
        """Sets the imap_ssl of this ConnectorImapConnectionDto.


        :param imap_ssl: The imap_ssl of this ConnectorImapConnectionDto.  # noqa: E501
        :type: bool
        """

        self._imap_ssl = imap_ssl

    @property
    def select_folder(self):
        """Gets the select_folder of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The select_folder of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: str
        """
        return self._select_folder

    @select_folder.setter
    def select_folder(self, select_folder):
        """Sets the select_folder of this ConnectorImapConnectionDto.


        :param select_folder: The select_folder of this ConnectorImapConnectionDto.  # noqa: E501
        :type: str
        """

        self._select_folder = select_folder

    @property
    def search_terms(self):
        """Gets the search_terms of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The search_terms of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: str
        """
        return self._search_terms

    @search_terms.setter
    def search_terms(self, search_terms):
        """Sets the search_terms of this ConnectorImapConnectionDto.


        :param search_terms: The search_terms of this ConnectorImapConnectionDto.  # noqa: E501
        :type: str
        """

        self._search_terms = search_terms

    @property
    def enabled(self):
        """Gets the enabled of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The enabled of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConnectorImapConnectionDto.


        :param enabled: The enabled of this ConnectorImapConnectionDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def created_at(self):
        """Gets the created_at of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The created_at of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConnectorImapConnectionDto.


        :param created_at: The created_at of this ConnectorImapConnectionDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this ConnectorImapConnectionDto.  # noqa: E501


        :return: The id of this ConnectorImapConnectionDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorImapConnectionDto.


        :param id: The id of this ConnectorImapConnectionDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorImapConnectionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectorImapConnectionDto):
            return True

        return self.to_dict() != other.to_dict()
