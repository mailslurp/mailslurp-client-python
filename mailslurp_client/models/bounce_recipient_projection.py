# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class BounceRecipientProjection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'sent_email_id': 'str',
        'recipient': 'str',
        'action': 'str',
        'bounce_type': 'str',
        'id': 'str',
        'status': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'sent_email_id': 'sentEmailId',
        'recipient': 'recipient',
        'action': 'action',
        'bounce_type': 'bounceType',
        'id': 'id',
        'status': 'status'
    }

    def __init__(self, created_at=None, sent_email_id=None, recipient=None, action=None, bounce_type=None, id=None, status=None, local_vars_configuration=None):  # noqa: E501
        """BounceRecipientProjection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._sent_email_id = None
        self._recipient = None
        self._action = None
        self._bounce_type = None
        self._id = None
        self._status = None
        self.discriminator = None

        self.created_at = created_at
        self.sent_email_id = sent_email_id
        self.recipient = recipient
        self.action = action
        self.bounce_type = bounce_type
        if id is not None:
            self.id = id
        self.status = status

    @property
    def created_at(self):
        """Gets the created_at of this BounceRecipientProjection.  # noqa: E501


        :return: The created_at of this BounceRecipientProjection.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BounceRecipientProjection.


        :param created_at: The created_at of this BounceRecipientProjection.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def sent_email_id(self):
        """Gets the sent_email_id of this BounceRecipientProjection.  # noqa: E501


        :return: The sent_email_id of this BounceRecipientProjection.  # noqa: E501
        :rtype: str
        """
        return self._sent_email_id

    @sent_email_id.setter
    def sent_email_id(self, sent_email_id):
        """Sets the sent_email_id of this BounceRecipientProjection.


        :param sent_email_id: The sent_email_id of this BounceRecipientProjection.  # noqa: E501
        :type: str
        """

        self._sent_email_id = sent_email_id

    @property
    def recipient(self):
        """Gets the recipient of this BounceRecipientProjection.  # noqa: E501


        :return: The recipient of this BounceRecipientProjection.  # noqa: E501
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this BounceRecipientProjection.


        :param recipient: The recipient of this BounceRecipientProjection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and recipient is None:  # noqa: E501
            raise ValueError("Invalid value for `recipient`, must not be `None`")  # noqa: E501

        self._recipient = recipient

    @property
    def action(self):
        """Gets the action of this BounceRecipientProjection.  # noqa: E501


        :return: The action of this BounceRecipientProjection.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this BounceRecipientProjection.


        :param action: The action of this BounceRecipientProjection.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def bounce_type(self):
        """Gets the bounce_type of this BounceRecipientProjection.  # noqa: E501


        :return: The bounce_type of this BounceRecipientProjection.  # noqa: E501
        :rtype: str
        """
        return self._bounce_type

    @bounce_type.setter
    def bounce_type(self, bounce_type):
        """Sets the bounce_type of this BounceRecipientProjection.


        :param bounce_type: The bounce_type of this BounceRecipientProjection.  # noqa: E501
        :type: str
        """

        self._bounce_type = bounce_type

    @property
    def id(self):
        """Gets the id of this BounceRecipientProjection.  # noqa: E501


        :return: The id of this BounceRecipientProjection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BounceRecipientProjection.


        :param id: The id of this BounceRecipientProjection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this BounceRecipientProjection.  # noqa: E501


        :return: The status of this BounceRecipientProjection.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BounceRecipientProjection.


        :param status: The status of this BounceRecipientProjection.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BounceRecipientProjection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BounceRecipientProjection):
            return True

        return self.to_dict() != other.to_dict()
