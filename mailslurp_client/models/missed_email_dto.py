# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class MissedEmailDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'user_id': 'str',
        'subject': 'str',
        'body_excerpt': 'str',
        'attachment_count': 'int',
        '_from': 'str',
        'raw_url': 'str',
        'raw_key': 'str',
        'raw_bucket': 'str',
        'can_restore': 'bool',
        'to': 'list[str]',
        'cc': 'list[str]',
        'bcc': 'list[str]',
        'inbox_ids': 'list[str]',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'subject': 'subject',
        'body_excerpt': 'bodyExcerpt',
        'attachment_count': 'attachmentCount',
        '_from': 'from',
        'raw_url': 'rawUrl',
        'raw_key': 'rawKey',
        'raw_bucket': 'rawBucket',
        'can_restore': 'canRestore',
        'to': 'to',
        'cc': 'cc',
        'bcc': 'bcc',
        'inbox_ids': 'inboxIds',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, user_id=None, subject=None, body_excerpt=None, attachment_count=None, _from=None, raw_url=None, raw_key=None, raw_bucket=None, can_restore=None, to=None, cc=None, bcc=None, inbox_ids=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """MissedEmailDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user_id = None
        self._subject = None
        self._body_excerpt = None
        self._attachment_count = None
        self.__from = None
        self._raw_url = None
        self._raw_key = None
        self._raw_bucket = None
        self._can_restore = None
        self._to = None
        self._cc = None
        self._bcc = None
        self._inbox_ids = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        self.id = id
        self.user_id = user_id
        self.subject = subject
        self.body_excerpt = body_excerpt
        self.attachment_count = attachment_count
        self._from = _from
        self.raw_url = raw_url
        self.raw_key = raw_key
        self.raw_bucket = raw_bucket
        self.can_restore = can_restore
        self.to = to
        self.cc = cc
        self.bcc = bcc
        self.inbox_ids = inbox_ids
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this MissedEmailDto.  # noqa: E501


        :return: The id of this MissedEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MissedEmailDto.


        :param id: The id of this MissedEmailDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this MissedEmailDto.  # noqa: E501


        :return: The user_id of this MissedEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MissedEmailDto.


        :param user_id: The user_id of this MissedEmailDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def subject(self):
        """Gets the subject of this MissedEmailDto.  # noqa: E501


        :return: The subject of this MissedEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MissedEmailDto.


        :param subject: The subject of this MissedEmailDto.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def body_excerpt(self):
        """Gets the body_excerpt of this MissedEmailDto.  # noqa: E501


        :return: The body_excerpt of this MissedEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._body_excerpt

    @body_excerpt.setter
    def body_excerpt(self, body_excerpt):
        """Sets the body_excerpt of this MissedEmailDto.


        :param body_excerpt: The body_excerpt of this MissedEmailDto.  # noqa: E501
        :type: str
        """

        self._body_excerpt = body_excerpt

    @property
    def attachment_count(self):
        """Gets the attachment_count of this MissedEmailDto.  # noqa: E501


        :return: The attachment_count of this MissedEmailDto.  # noqa: E501
        :rtype: int
        """
        return self._attachment_count

    @attachment_count.setter
    def attachment_count(self, attachment_count):
        """Sets the attachment_count of this MissedEmailDto.


        :param attachment_count: The attachment_count of this MissedEmailDto.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and attachment_count is None:  # noqa: E501
            raise ValueError("Invalid value for `attachment_count`, must not be `None`")  # noqa: E501

        self._attachment_count = attachment_count

    @property
    def _from(self):
        """Gets the _from of this MissedEmailDto.  # noqa: E501


        :return: The _from of this MissedEmailDto.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this MissedEmailDto.


        :param _from: The _from of this MissedEmailDto.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def raw_url(self):
        """Gets the raw_url of this MissedEmailDto.  # noqa: E501


        :return: The raw_url of this MissedEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._raw_url

    @raw_url.setter
    def raw_url(self, raw_url):
        """Sets the raw_url of this MissedEmailDto.


        :param raw_url: The raw_url of this MissedEmailDto.  # noqa: E501
        :type: str
        """

        self._raw_url = raw_url

    @property
    def raw_key(self):
        """Gets the raw_key of this MissedEmailDto.  # noqa: E501


        :return: The raw_key of this MissedEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._raw_key

    @raw_key.setter
    def raw_key(self, raw_key):
        """Sets the raw_key of this MissedEmailDto.


        :param raw_key: The raw_key of this MissedEmailDto.  # noqa: E501
        :type: str
        """

        self._raw_key = raw_key

    @property
    def raw_bucket(self):
        """Gets the raw_bucket of this MissedEmailDto.  # noqa: E501


        :return: The raw_bucket of this MissedEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._raw_bucket

    @raw_bucket.setter
    def raw_bucket(self, raw_bucket):
        """Sets the raw_bucket of this MissedEmailDto.


        :param raw_bucket: The raw_bucket of this MissedEmailDto.  # noqa: E501
        :type: str
        """

        self._raw_bucket = raw_bucket

    @property
    def can_restore(self):
        """Gets the can_restore of this MissedEmailDto.  # noqa: E501


        :return: The can_restore of this MissedEmailDto.  # noqa: E501
        :rtype: bool
        """
        return self._can_restore

    @can_restore.setter
    def can_restore(self, can_restore):
        """Sets the can_restore of this MissedEmailDto.


        :param can_restore: The can_restore of this MissedEmailDto.  # noqa: E501
        :type: bool
        """

        self._can_restore = can_restore

    @property
    def to(self):
        """Gets the to of this MissedEmailDto.  # noqa: E501


        :return: The to of this MissedEmailDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MissedEmailDto.


        :param to: The to of this MissedEmailDto.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and to is None:  # noqa: E501
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def cc(self):
        """Gets the cc of this MissedEmailDto.  # noqa: E501


        :return: The cc of this MissedEmailDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this MissedEmailDto.


        :param cc: The cc of this MissedEmailDto.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and cc is None:  # noqa: E501
            raise ValueError("Invalid value for `cc`, must not be `None`")  # noqa: E501

        self._cc = cc

    @property
    def bcc(self):
        """Gets the bcc of this MissedEmailDto.  # noqa: E501


        :return: The bcc of this MissedEmailDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this MissedEmailDto.


        :param bcc: The bcc of this MissedEmailDto.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and bcc is None:  # noqa: E501
            raise ValueError("Invalid value for `bcc`, must not be `None`")  # noqa: E501

        self._bcc = bcc

    @property
    def inbox_ids(self):
        """Gets the inbox_ids of this MissedEmailDto.  # noqa: E501


        :return: The inbox_ids of this MissedEmailDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._inbox_ids

    @inbox_ids.setter
    def inbox_ids(self, inbox_ids):
        """Sets the inbox_ids of this MissedEmailDto.


        :param inbox_ids: The inbox_ids of this MissedEmailDto.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and inbox_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `inbox_ids`, must not be `None`")  # noqa: E501

        self._inbox_ids = inbox_ids

    @property
    def created_at(self):
        """Gets the created_at of this MissedEmailDto.  # noqa: E501


        :return: The created_at of this MissedEmailDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MissedEmailDto.


        :param created_at: The created_at of this MissedEmailDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MissedEmailDto.  # noqa: E501


        :return: The updated_at of this MissedEmailDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MissedEmailDto.


        :param updated_at: The updated_at of this MissedEmailDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MissedEmailDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MissedEmailDto):
            return True

        return self.to_dict() != other.to_dict()
