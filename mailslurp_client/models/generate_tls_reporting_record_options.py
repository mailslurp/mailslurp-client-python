# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class GenerateTlsReportingRecordOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reporting_addresses': 'list[str]',
        'reporting_url': 'str',
        'host': 'str',
        'version': 'str',
        'ttl': 'int'
    }

    attribute_map = {
        'reporting_addresses': 'reportingAddresses',
        'reporting_url': 'reportingUrl',
        'host': 'host',
        'version': 'version',
        'ttl': 'ttl'
    }

    def __init__(self, reporting_addresses=None, reporting_url=None, host=None, version=None, ttl=None, local_vars_configuration=None):  # noqa: E501
        """GenerateTlsReportingRecordOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._reporting_addresses = None
        self._reporting_url = None
        self._host = None
        self._version = None
        self._ttl = None
        self.discriminator = None

        self.reporting_addresses = reporting_addresses
        if reporting_url is not None:
            self.reporting_url = reporting_url
        self.host = host
        self.version = version
        self.ttl = ttl

    @property
    def reporting_addresses(self):
        """Gets the reporting_addresses of this GenerateTlsReportingRecordOptions.  # noqa: E501


        :return: The reporting_addresses of this GenerateTlsReportingRecordOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._reporting_addresses

    @reporting_addresses.setter
    def reporting_addresses(self, reporting_addresses):
        """Sets the reporting_addresses of this GenerateTlsReportingRecordOptions.


        :param reporting_addresses: The reporting_addresses of this GenerateTlsReportingRecordOptions.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and reporting_addresses is None:  # noqa: E501
            raise ValueError("Invalid value for `reporting_addresses`, must not be `None`")  # noqa: E501

        self._reporting_addresses = reporting_addresses

    @property
    def reporting_url(self):
        """Gets the reporting_url of this GenerateTlsReportingRecordOptions.  # noqa: E501


        :return: The reporting_url of this GenerateTlsReportingRecordOptions.  # noqa: E501
        :rtype: str
        """
        return self._reporting_url

    @reporting_url.setter
    def reporting_url(self, reporting_url):
        """Sets the reporting_url of this GenerateTlsReportingRecordOptions.


        :param reporting_url: The reporting_url of this GenerateTlsReportingRecordOptions.  # noqa: E501
        :type: str
        """

        self._reporting_url = reporting_url

    @property
    def host(self):
        """Gets the host of this GenerateTlsReportingRecordOptions.  # noqa: E501


        :return: The host of this GenerateTlsReportingRecordOptions.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this GenerateTlsReportingRecordOptions.


        :param host: The host of this GenerateTlsReportingRecordOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and host is None:  # noqa: E501
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def version(self):
        """Gets the version of this GenerateTlsReportingRecordOptions.  # noqa: E501


        :return: The version of this GenerateTlsReportingRecordOptions.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GenerateTlsReportingRecordOptions.


        :param version: The version of this GenerateTlsReportingRecordOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        allowed_values = ["TLSRPTv1"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and version not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"  # noqa: E501
                .format(version, allowed_values)
            )

        self._version = version

    @property
    def ttl(self):
        """Gets the ttl of this GenerateTlsReportingRecordOptions.  # noqa: E501


        :return: The ttl of this GenerateTlsReportingRecordOptions.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this GenerateTlsReportingRecordOptions.


        :param ttl: The ttl of this GenerateTlsReportingRecordOptions.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and ttl is None:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must not be `None`")  # noqa: E501

        self._ttl = ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateTlsReportingRecordOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateTlsReportingRecordOptions):
            return True

        return self.to_dict() != other.to_dict()
