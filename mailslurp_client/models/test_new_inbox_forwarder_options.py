# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class TestNewInboxForwarderOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'inbox_forwarder_test_options': 'InboxForwarderTestOptions',
        'create_inbox_forwarder_options': 'CreateInboxForwarderOptions'
    }

    attribute_map = {
        'inbox_forwarder_test_options': 'inboxForwarderTestOptions',
        'create_inbox_forwarder_options': 'createInboxForwarderOptions'
    }

    def __init__(self, inbox_forwarder_test_options=None, create_inbox_forwarder_options=None, local_vars_configuration=None):  # noqa: E501
        """TestNewInboxForwarderOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._inbox_forwarder_test_options = None
        self._create_inbox_forwarder_options = None
        self.discriminator = None

        self.inbox_forwarder_test_options = inbox_forwarder_test_options
        self.create_inbox_forwarder_options = create_inbox_forwarder_options

    @property
    def inbox_forwarder_test_options(self):
        """Gets the inbox_forwarder_test_options of this TestNewInboxForwarderOptions.  # noqa: E501


        :return: The inbox_forwarder_test_options of this TestNewInboxForwarderOptions.  # noqa: E501
        :rtype: InboxForwarderTestOptions
        """
        return self._inbox_forwarder_test_options

    @inbox_forwarder_test_options.setter
    def inbox_forwarder_test_options(self, inbox_forwarder_test_options):
        """Sets the inbox_forwarder_test_options of this TestNewInboxForwarderOptions.


        :param inbox_forwarder_test_options: The inbox_forwarder_test_options of this TestNewInboxForwarderOptions.  # noqa: E501
        :type: InboxForwarderTestOptions
        """
        if self.local_vars_configuration.client_side_validation and inbox_forwarder_test_options is None:  # noqa: E501
            raise ValueError("Invalid value for `inbox_forwarder_test_options`, must not be `None`")  # noqa: E501

        self._inbox_forwarder_test_options = inbox_forwarder_test_options

    @property
    def create_inbox_forwarder_options(self):
        """Gets the create_inbox_forwarder_options of this TestNewInboxForwarderOptions.  # noqa: E501


        :return: The create_inbox_forwarder_options of this TestNewInboxForwarderOptions.  # noqa: E501
        :rtype: CreateInboxForwarderOptions
        """
        return self._create_inbox_forwarder_options

    @create_inbox_forwarder_options.setter
    def create_inbox_forwarder_options(self, create_inbox_forwarder_options):
        """Sets the create_inbox_forwarder_options of this TestNewInboxForwarderOptions.


        :param create_inbox_forwarder_options: The create_inbox_forwarder_options of this TestNewInboxForwarderOptions.  # noqa: E501
        :type: CreateInboxForwarderOptions
        """
        if self.local_vars_configuration.client_side_validation and create_inbox_forwarder_options is None:  # noqa: E501
            raise ValueError("Invalid value for `create_inbox_forwarder_options`, must not be `None`")  # noqa: E501

        self._create_inbox_forwarder_options = create_inbox_forwarder_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestNewInboxForwarderOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestNewInboxForwarderOptions):
            return True

        return self.to_dict() != other.to_dict()
