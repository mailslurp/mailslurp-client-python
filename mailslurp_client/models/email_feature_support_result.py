# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class EmailFeatureSupportResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'names': 'EmailFeatureNames',
        'detected_features': 'list[str]',
        'feature_overviews': 'list[EmailFeatureOverview]',
        'feature_percentages': 'list[EmailFeatureSupportStatusPercentage]'
    }

    attribute_map = {
        'names': 'names',
        'detected_features': 'detectedFeatures',
        'feature_overviews': 'featureOverviews',
        'feature_percentages': 'featurePercentages'
    }

    def __init__(self, names=None, detected_features=None, feature_overviews=None, feature_percentages=None, local_vars_configuration=None):  # noqa: E501
        """EmailFeatureSupportResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._names = None
        self._detected_features = None
        self._feature_overviews = None
        self._feature_percentages = None
        self.discriminator = None

        self.names = names
        self.detected_features = detected_features
        self.feature_overviews = feature_overviews
        self.feature_percentages = feature_percentages

    @property
    def names(self):
        """Gets the names of this EmailFeatureSupportResult.  # noqa: E501


        :return: The names of this EmailFeatureSupportResult.  # noqa: E501
        :rtype: EmailFeatureNames
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this EmailFeatureSupportResult.


        :param names: The names of this EmailFeatureSupportResult.  # noqa: E501
        :type: EmailFeatureNames
        """
        if self.local_vars_configuration.client_side_validation and names is None:  # noqa: E501
            raise ValueError("Invalid value for `names`, must not be `None`")  # noqa: E501

        self._names = names

    @property
    def detected_features(self):
        """Gets the detected_features of this EmailFeatureSupportResult.  # noqa: E501


        :return: The detected_features of this EmailFeatureSupportResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._detected_features

    @detected_features.setter
    def detected_features(self, detected_features):
        """Sets the detected_features of this EmailFeatureSupportResult.


        :param detected_features: The detected_features of this EmailFeatureSupportResult.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and detected_features is None:  # noqa: E501
            raise ValueError("Invalid value for `detected_features`, must not be `None`")  # noqa: E501
        allowed_values = ["amp", "css-accent-color", "css-align-items", "css-animation", "css-aspect-ratio", "css-at-font-face", "css-at-import", "css-at-keyframes", "css-at-media", "css-at-supports", "css-background-blend-mode", "css-background-clip", "css-background-color", "css-background-image", "css-background-origin", "css-background-position", "css-background-repeat", "css-background-size", "css-background", "css-block-inline-size", "css-border-image", "css-border-inline-block-individual", "css-border-inline-block-longhand", "css-border-inline-block", "css-border-radius-logical", "css-border-radius", "css-border", "css-box-shadow", "css-box-sizing", "css-caption-side", "css-clip-path", "css-column-count", "css-column-layout-properties", "css-direction", "css-display-flex", "css-display-grid", "css-display-none", "css-display", "css-filter", "css-flex-direction", "css-flex-wrap", "css-float", "css-font-kerning", "css-font-weight", "css-font", "css-gap", "css-grid-template", "css-height", "css-hyphens", "css-inline-size", "css-justify-content", "css-left-right-top-bottom", "css-letter-spacing", "css-line-height", "css-list-style-image", "css-list-style-position", "css-list-style-type", "css-list-style", "css-margin-block-start-end", "css-margin-inline-block", "css-margin-inline-start-end", "css-margin-inline", "css-margin", "css-max-block-size", "css-max-height", "css-max-width", "css-min-height", "css-min-inline-size", "css-min-width", "css-mix-blend-mode", "css-object-fit", "css-object-position", "css-opacity", "css-outline-offset", "css-outline", "css-overflow-wrap", "css-overflow", "css-padding-block-start-end", "css-padding-inline-block", "css-padding-inline-start-end", "css-padding", "css-position", "css-tab-size", "css-table-layout", "css-text-align-last", "css-text-align", "css-text-decoration-color", "css-text-decoration-thickness", "css-text-decoration", "css-text-emphasis-position", "css-text-emphasis", "css-text-indent", "css-text-overflow", "css-text-shadow", "css-text-transform", "css-text-underline-offset", "css-transform", "css-vertical-align", "css-visibility", "css-white-space", "css-width", "css-word-break", "css-writing-mode", "css-z-index", "html-abbr", "html-address", "html-align", "html-anchor-links", "html-aria-describedby", "html-aria-hidden", "html-aria-label", "html-aria-labelledby", "html-aria-live", "html-audio", "html-background", "html-base", "html-blockquote", "html-body", "html-button-reset", "html-button-submit", "html-code", "html-del", "html-dfn", "html-dialog", "html-dir", "html-div", "html-doctype", "html-form", "html-h1-h6", "html-height", "html-image-maps", "html-input-checkbox", "html-input-hidden", "html-input-radio", "html-input-reset", "html-input-submit", "html-input-text", "html-lang", "html-link", "html-lists", "html-loading-attribute", "html-mailto-links", "html-marquee", "html-meter", "html-object", "html-p", "html-picture", "html-pre", "html-progress", "html-required", "html-role", "html-rp", "html-rt", "html-ruby", "html-select", "html-semantics", "html-small", "html-span", "html-srcset", "html-strike", "html-strong", "html-style", "html-svg", "html-table", "html-target", "html-textarea", "html-valign", "html-video", "html-wbr", "html-width", "image-avif", "image-base64", "image-bmp", "image-gif", "image-ico", "image-jpg", "image-png", "image-svg", "image-webp", "unsupported"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(detected_features).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `detected_features` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(detected_features) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._detected_features = detected_features

    @property
    def feature_overviews(self):
        """Gets the feature_overviews of this EmailFeatureSupportResult.  # noqa: E501


        :return: The feature_overviews of this EmailFeatureSupportResult.  # noqa: E501
        :rtype: list[EmailFeatureOverview]
        """
        return self._feature_overviews

    @feature_overviews.setter
    def feature_overviews(self, feature_overviews):
        """Sets the feature_overviews of this EmailFeatureSupportResult.


        :param feature_overviews: The feature_overviews of this EmailFeatureSupportResult.  # noqa: E501
        :type: list[EmailFeatureOverview]
        """
        if self.local_vars_configuration.client_side_validation and feature_overviews is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_overviews`, must not be `None`")  # noqa: E501

        self._feature_overviews = feature_overviews

    @property
    def feature_percentages(self):
        """Gets the feature_percentages of this EmailFeatureSupportResult.  # noqa: E501


        :return: The feature_percentages of this EmailFeatureSupportResult.  # noqa: E501
        :rtype: list[EmailFeatureSupportStatusPercentage]
        """
        return self._feature_percentages

    @feature_percentages.setter
    def feature_percentages(self, feature_percentages):
        """Sets the feature_percentages of this EmailFeatureSupportResult.


        :param feature_percentages: The feature_percentages of this EmailFeatureSupportResult.  # noqa: E501
        :type: list[EmailFeatureSupportStatusPercentage]
        """
        if self.local_vars_configuration.client_side_validation and feature_percentages is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_percentages`, must not be `None`")  # noqa: E501

        self._feature_percentages = feature_percentages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailFeatureSupportResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailFeatureSupportResult):
            return True

        return self.to_dict() != other.to_dict()
