# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CreateOAuthExchangeResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'success': 'bool',
        'inbox_id': 'str',
        'error': 'str'
    }

    attribute_map = {
        'success': 'success',
        'inbox_id': 'inboxId',
        'error': 'error'
    }

    def __init__(self, success=None, inbox_id=None, error=None, local_vars_configuration=None):  # noqa: E501
        """CreateOAuthExchangeResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._success = None
        self._inbox_id = None
        self._error = None
        self.discriminator = None

        self.success = success
        if inbox_id is not None:
            self.inbox_id = inbox_id
        if error is not None:
            self.error = error

    @property
    def success(self):
        """Gets the success of this CreateOAuthExchangeResult.  # noqa: E501


        :return: The success of this CreateOAuthExchangeResult.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this CreateOAuthExchangeResult.


        :param success: The success of this CreateOAuthExchangeResult.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and success is None:  # noqa: E501
            raise ValueError("Invalid value for `success`, must not be `None`")  # noqa: E501

        self._success = success

    @property
    def inbox_id(self):
        """Gets the inbox_id of this CreateOAuthExchangeResult.  # noqa: E501


        :return: The inbox_id of this CreateOAuthExchangeResult.  # noqa: E501
        :rtype: str
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this CreateOAuthExchangeResult.


        :param inbox_id: The inbox_id of this CreateOAuthExchangeResult.  # noqa: E501
        :type: str
        """

        self._inbox_id = inbox_id

    @property
    def error(self):
        """Gets the error of this CreateOAuthExchangeResult.  # noqa: E501


        :return: The error of this CreateOAuthExchangeResult.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CreateOAuthExchangeResult.


        :param error: The error of this CreateOAuthExchangeResult.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOAuthExchangeResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateOAuthExchangeResult):
            return True

        return self.to_dict() != other.to_dict()
