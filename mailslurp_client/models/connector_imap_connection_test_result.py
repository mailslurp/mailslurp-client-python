# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ConnectorImapConnectionTestResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error': 'str',
        'success': 'bool',
        'message': 'str',
        'logs': 'list[str]'
    }

    attribute_map = {
        'error': 'error',
        'success': 'success',
        'message': 'message',
        'logs': 'logs'
    }

    def __init__(self, error=None, success=None, message=None, logs=None, local_vars_configuration=None):  # noqa: E501
        """ConnectorImapConnectionTestResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._error = None
        self._success = None
        self._message = None
        self._logs = None
        self.discriminator = None

        if error is not None:
            self.error = error
        self.success = success
        if message is not None:
            self.message = message
        if logs is not None:
            self.logs = logs

    @property
    def error(self):
        """Gets the error of this ConnectorImapConnectionTestResult.  # noqa: E501


        :return: The error of this ConnectorImapConnectionTestResult.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ConnectorImapConnectionTestResult.


        :param error: The error of this ConnectorImapConnectionTestResult.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def success(self):
        """Gets the success of this ConnectorImapConnectionTestResult.  # noqa: E501


        :return: The success of this ConnectorImapConnectionTestResult.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ConnectorImapConnectionTestResult.


        :param success: The success of this ConnectorImapConnectionTestResult.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and success is None:  # noqa: E501
            raise ValueError("Invalid value for `success`, must not be `None`")  # noqa: E501

        self._success = success

    @property
    def message(self):
        """Gets the message of this ConnectorImapConnectionTestResult.  # noqa: E501


        :return: The message of this ConnectorImapConnectionTestResult.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ConnectorImapConnectionTestResult.


        :param message: The message of this ConnectorImapConnectionTestResult.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def logs(self):
        """Gets the logs of this ConnectorImapConnectionTestResult.  # noqa: E501


        :return: The logs of this ConnectorImapConnectionTestResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this ConnectorImapConnectionTestResult.


        :param logs: The logs of this ConnectorImapConnectionTestResult.  # noqa: E501
        :type: list[str]
        """

        self._logs = logs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorImapConnectionTestResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectorImapConnectionTestResult):
            return True

        return self.to_dict() != other.to_dict()
