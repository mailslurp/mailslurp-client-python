# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class EmailFeatureVersionStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'support_flags': 'EmailFeatureSupportFlags'
    }

    attribute_map = {
        'version': 'version',
        'support_flags': 'supportFlags'
    }

    def __init__(self, version=None, support_flags=None, local_vars_configuration=None):  # noqa: E501
        """EmailFeatureVersionStatistics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._support_flags = None
        self.discriminator = None

        self.version = version
        self.support_flags = support_flags

    @property
    def version(self):
        """Gets the version of this EmailFeatureVersionStatistics.  # noqa: E501


        :return: The version of this EmailFeatureVersionStatistics.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EmailFeatureVersionStatistics.


        :param version: The version of this EmailFeatureVersionStatistics.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def support_flags(self):
        """Gets the support_flags of this EmailFeatureVersionStatistics.  # noqa: E501


        :return: The support_flags of this EmailFeatureVersionStatistics.  # noqa: E501
        :rtype: EmailFeatureSupportFlags
        """
        return self._support_flags

    @support_flags.setter
    def support_flags(self, support_flags):
        """Sets the support_flags of this EmailFeatureVersionStatistics.


        :param support_flags: The support_flags of this EmailFeatureVersionStatistics.  # noqa: E501
        :type: EmailFeatureSupportFlags
        """
        if self.local_vars_configuration.client_side_validation and support_flags is None:  # noqa: E501
            raise ValueError("Invalid value for `support_flags`, must not be `None`")  # noqa: E501

        self._support_flags = support_flags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailFeatureVersionStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailFeatureVersionStatistics):
            return True

        return self.to_dict() != other.to_dict()
