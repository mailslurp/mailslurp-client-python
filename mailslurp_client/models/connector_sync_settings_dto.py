# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ConnectorSyncSettingsDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'user_id': 'str',
        'connector_id': 'str',
        'sync_enabled': 'bool',
        'sync_schedule_type': 'str',
        'sync_interval': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'connector_id': 'connectorId',
        'sync_enabled': 'syncEnabled',
        'sync_schedule_type': 'syncScheduleType',
        'sync_interval': 'syncInterval'
    }

    def __init__(self, id=None, user_id=None, connector_id=None, sync_enabled=None, sync_schedule_type=None, sync_interval=None, local_vars_configuration=None):  # noqa: E501
        """ConnectorSyncSettingsDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user_id = None
        self._connector_id = None
        self._sync_enabled = None
        self._sync_schedule_type = None
        self._sync_interval = None
        self.discriminator = None

        self.id = id
        self.user_id = user_id
        self.connector_id = connector_id
        self.sync_enabled = sync_enabled
        self.sync_schedule_type = sync_schedule_type
        self.sync_interval = sync_interval

    @property
    def id(self):
        """Gets the id of this ConnectorSyncSettingsDto.  # noqa: E501


        :return: The id of this ConnectorSyncSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorSyncSettingsDto.


        :param id: The id of this ConnectorSyncSettingsDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this ConnectorSyncSettingsDto.  # noqa: E501


        :return: The user_id of this ConnectorSyncSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ConnectorSyncSettingsDto.


        :param user_id: The user_id of this ConnectorSyncSettingsDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def connector_id(self):
        """Gets the connector_id of this ConnectorSyncSettingsDto.  # noqa: E501


        :return: The connector_id of this ConnectorSyncSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this ConnectorSyncSettingsDto.


        :param connector_id: The connector_id of this ConnectorSyncSettingsDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_id is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_id`, must not be `None`")  # noqa: E501

        self._connector_id = connector_id

    @property
    def sync_enabled(self):
        """Gets the sync_enabled of this ConnectorSyncSettingsDto.  # noqa: E501


        :return: The sync_enabled of this ConnectorSyncSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._sync_enabled

    @sync_enabled.setter
    def sync_enabled(self, sync_enabled):
        """Sets the sync_enabled of this ConnectorSyncSettingsDto.


        :param sync_enabled: The sync_enabled of this ConnectorSyncSettingsDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and sync_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `sync_enabled`, must not be `None`")  # noqa: E501

        self._sync_enabled = sync_enabled

    @property
    def sync_schedule_type(self):
        """Gets the sync_schedule_type of this ConnectorSyncSettingsDto.  # noqa: E501


        :return: The sync_schedule_type of this ConnectorSyncSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._sync_schedule_type

    @sync_schedule_type.setter
    def sync_schedule_type(self, sync_schedule_type):
        """Sets the sync_schedule_type of this ConnectorSyncSettingsDto.


        :param sync_schedule_type: The sync_schedule_type of this ConnectorSyncSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"INTERVAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sync_schedule_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sync_schedule_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sync_schedule_type, allowed_values)
            )

        self._sync_schedule_type = sync_schedule_type

    @property
    def sync_interval(self):
        """Gets the sync_interval of this ConnectorSyncSettingsDto.  # noqa: E501


        :return: The sync_interval of this ConnectorSyncSettingsDto.  # noqa: E501
        :rtype: int
        """
        return self._sync_interval

    @sync_interval.setter
    def sync_interval(self, sync_interval):
        """Sets the sync_interval of this ConnectorSyncSettingsDto.


        :param sync_interval: The sync_interval of this ConnectorSyncSettingsDto.  # noqa: E501
        :type: int
        """

        self._sync_interval = sync_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorSyncSettingsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectorSyncSettingsDto):
            return True

        return self.to_dict() != other.to_dict()
