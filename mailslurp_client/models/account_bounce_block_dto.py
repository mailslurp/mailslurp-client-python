# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class AccountBounceBlockDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_sending_blocked': 'bool',
        'bounce_count': 'int',
        'bounce_count_today': 'int',
        'maximum_daily_bounces': 'int',
        'maximum_account_bounces': 'int'
    }

    attribute_map = {
        'is_sending_blocked': 'isSendingBlocked',
        'bounce_count': 'bounceCount',
        'bounce_count_today': 'bounceCountToday',
        'maximum_daily_bounces': 'maximumDailyBounces',
        'maximum_account_bounces': 'maximumAccountBounces'
    }

    def __init__(self, is_sending_blocked=None, bounce_count=None, bounce_count_today=None, maximum_daily_bounces=None, maximum_account_bounces=None, local_vars_configuration=None):  # noqa: E501
        """AccountBounceBlockDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_sending_blocked = None
        self._bounce_count = None
        self._bounce_count_today = None
        self._maximum_daily_bounces = None
        self._maximum_account_bounces = None
        self.discriminator = None

        self.is_sending_blocked = is_sending_blocked
        self.bounce_count = bounce_count
        self.bounce_count_today = bounce_count_today
        self.maximum_daily_bounces = maximum_daily_bounces
        self.maximum_account_bounces = maximum_account_bounces

    @property
    def is_sending_blocked(self):
        """Gets the is_sending_blocked of this AccountBounceBlockDto.  # noqa: E501


        :return: The is_sending_blocked of this AccountBounceBlockDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_sending_blocked

    @is_sending_blocked.setter
    def is_sending_blocked(self, is_sending_blocked):
        """Sets the is_sending_blocked of this AccountBounceBlockDto.


        :param is_sending_blocked: The is_sending_blocked of this AccountBounceBlockDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_sending_blocked is None:  # noqa: E501
            raise ValueError("Invalid value for `is_sending_blocked`, must not be `None`")  # noqa: E501

        self._is_sending_blocked = is_sending_blocked

    @property
    def bounce_count(self):
        """Gets the bounce_count of this AccountBounceBlockDto.  # noqa: E501


        :return: The bounce_count of this AccountBounceBlockDto.  # noqa: E501
        :rtype: int
        """
        return self._bounce_count

    @bounce_count.setter
    def bounce_count(self, bounce_count):
        """Sets the bounce_count of this AccountBounceBlockDto.


        :param bounce_count: The bounce_count of this AccountBounceBlockDto.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and bounce_count is None:  # noqa: E501
            raise ValueError("Invalid value for `bounce_count`, must not be `None`")  # noqa: E501

        self._bounce_count = bounce_count

    @property
    def bounce_count_today(self):
        """Gets the bounce_count_today of this AccountBounceBlockDto.  # noqa: E501


        :return: The bounce_count_today of this AccountBounceBlockDto.  # noqa: E501
        :rtype: int
        """
        return self._bounce_count_today

    @bounce_count_today.setter
    def bounce_count_today(self, bounce_count_today):
        """Sets the bounce_count_today of this AccountBounceBlockDto.


        :param bounce_count_today: The bounce_count_today of this AccountBounceBlockDto.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and bounce_count_today is None:  # noqa: E501
            raise ValueError("Invalid value for `bounce_count_today`, must not be `None`")  # noqa: E501

        self._bounce_count_today = bounce_count_today

    @property
    def maximum_daily_bounces(self):
        """Gets the maximum_daily_bounces of this AccountBounceBlockDto.  # noqa: E501


        :return: The maximum_daily_bounces of this AccountBounceBlockDto.  # noqa: E501
        :rtype: int
        """
        return self._maximum_daily_bounces

    @maximum_daily_bounces.setter
    def maximum_daily_bounces(self, maximum_daily_bounces):
        """Sets the maximum_daily_bounces of this AccountBounceBlockDto.


        :param maximum_daily_bounces: The maximum_daily_bounces of this AccountBounceBlockDto.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and maximum_daily_bounces is None:  # noqa: E501
            raise ValueError("Invalid value for `maximum_daily_bounces`, must not be `None`")  # noqa: E501

        self._maximum_daily_bounces = maximum_daily_bounces

    @property
    def maximum_account_bounces(self):
        """Gets the maximum_account_bounces of this AccountBounceBlockDto.  # noqa: E501


        :return: The maximum_account_bounces of this AccountBounceBlockDto.  # noqa: E501
        :rtype: int
        """
        return self._maximum_account_bounces

    @maximum_account_bounces.setter
    def maximum_account_bounces(self, maximum_account_bounces):
        """Sets the maximum_account_bounces of this AccountBounceBlockDto.


        :param maximum_account_bounces: The maximum_account_bounces of this AccountBounceBlockDto.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and maximum_account_bounces is None:  # noqa: E501
            raise ValueError("Invalid value for `maximum_account_bounces`, must not be `None`")  # noqa: E501

        self._maximum_account_bounces = maximum_account_bounces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountBounceBlockDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountBounceBlockDto):
            return True

        return self.to_dict() != other.to_dict()
