# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ImapAccessDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'secure_imap_server_host': 'str',
        'secure_imap_server_port': 'int',
        'secure_imap_username': 'str',
        'secure_imap_password': 'str',
        'imap_server_host': 'str',
        'imap_server_port': 'int',
        'imap_username': 'str',
        'imap_password': 'str',
        'imap_mailbox': 'str'
    }

    attribute_map = {
        'secure_imap_server_host': 'secureImapServerHost',
        'secure_imap_server_port': 'secureImapServerPort',
        'secure_imap_username': 'secureImapUsername',
        'secure_imap_password': 'secureImapPassword',
        'imap_server_host': 'imapServerHost',
        'imap_server_port': 'imapServerPort',
        'imap_username': 'imapUsername',
        'imap_password': 'imapPassword',
        'imap_mailbox': 'imapMailbox'
    }

    def __init__(self, secure_imap_server_host=None, secure_imap_server_port=None, secure_imap_username=None, secure_imap_password=None, imap_server_host=None, imap_server_port=None, imap_username=None, imap_password=None, imap_mailbox=None, local_vars_configuration=None):  # noqa: E501
        """ImapAccessDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._secure_imap_server_host = None
        self._secure_imap_server_port = None
        self._secure_imap_username = None
        self._secure_imap_password = None
        self._imap_server_host = None
        self._imap_server_port = None
        self._imap_username = None
        self._imap_password = None
        self._imap_mailbox = None
        self.discriminator = None

        self.secure_imap_server_host = secure_imap_server_host
        self.secure_imap_server_port = secure_imap_server_port
        self.secure_imap_username = secure_imap_username
        self.secure_imap_password = secure_imap_password
        self.imap_server_host = imap_server_host
        self.imap_server_port = imap_server_port
        self.imap_username = imap_username
        self.imap_password = imap_password
        self.imap_mailbox = imap_mailbox

    @property
    def secure_imap_server_host(self):
        """Gets the secure_imap_server_host of this ImapAccessDetails.  # noqa: E501

        Secure TLS IMAP server host domain  # noqa: E501

        :return: The secure_imap_server_host of this ImapAccessDetails.  # noqa: E501
        :rtype: str
        """
        return self._secure_imap_server_host

    @secure_imap_server_host.setter
    def secure_imap_server_host(self, secure_imap_server_host):
        """Sets the secure_imap_server_host of this ImapAccessDetails.

        Secure TLS IMAP server host domain  # noqa: E501

        :param secure_imap_server_host: The secure_imap_server_host of this ImapAccessDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secure_imap_server_host is None:  # noqa: E501
            raise ValueError("Invalid value for `secure_imap_server_host`, must not be `None`")  # noqa: E501

        self._secure_imap_server_host = secure_imap_server_host

    @property
    def secure_imap_server_port(self):
        """Gets the secure_imap_server_port of this ImapAccessDetails.  # noqa: E501

        Secure TLS IMAP server host port  # noqa: E501

        :return: The secure_imap_server_port of this ImapAccessDetails.  # noqa: E501
        :rtype: int
        """
        return self._secure_imap_server_port

    @secure_imap_server_port.setter
    def secure_imap_server_port(self, secure_imap_server_port):
        """Sets the secure_imap_server_port of this ImapAccessDetails.

        Secure TLS IMAP server host port  # noqa: E501

        :param secure_imap_server_port: The secure_imap_server_port of this ImapAccessDetails.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and secure_imap_server_port is None:  # noqa: E501
            raise ValueError("Invalid value for `secure_imap_server_port`, must not be `None`")  # noqa: E501

        self._secure_imap_server_port = secure_imap_server_port

    @property
    def secure_imap_username(self):
        """Gets the secure_imap_username of this ImapAccessDetails.  # noqa: E501

        Secure TLS IMAP username for login  # noqa: E501

        :return: The secure_imap_username of this ImapAccessDetails.  # noqa: E501
        :rtype: str
        """
        return self._secure_imap_username

    @secure_imap_username.setter
    def secure_imap_username(self, secure_imap_username):
        """Sets the secure_imap_username of this ImapAccessDetails.

        Secure TLS IMAP username for login  # noqa: E501

        :param secure_imap_username: The secure_imap_username of this ImapAccessDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secure_imap_username is None:  # noqa: E501
            raise ValueError("Invalid value for `secure_imap_username`, must not be `None`")  # noqa: E501

        self._secure_imap_username = secure_imap_username

    @property
    def secure_imap_password(self):
        """Gets the secure_imap_password of this ImapAccessDetails.  # noqa: E501

        Secure TLS IMAP password for login  # noqa: E501

        :return: The secure_imap_password of this ImapAccessDetails.  # noqa: E501
        :rtype: str
        """
        return self._secure_imap_password

    @secure_imap_password.setter
    def secure_imap_password(self, secure_imap_password):
        """Sets the secure_imap_password of this ImapAccessDetails.

        Secure TLS IMAP password for login  # noqa: E501

        :param secure_imap_password: The secure_imap_password of this ImapAccessDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secure_imap_password is None:  # noqa: E501
            raise ValueError("Invalid value for `secure_imap_password`, must not be `None`")  # noqa: E501

        self._secure_imap_password = secure_imap_password

    @property
    def imap_server_host(self):
        """Gets the imap_server_host of this ImapAccessDetails.  # noqa: E501

        IMAP server host domain  # noqa: E501

        :return: The imap_server_host of this ImapAccessDetails.  # noqa: E501
        :rtype: str
        """
        return self._imap_server_host

    @imap_server_host.setter
    def imap_server_host(self, imap_server_host):
        """Sets the imap_server_host of this ImapAccessDetails.

        IMAP server host domain  # noqa: E501

        :param imap_server_host: The imap_server_host of this ImapAccessDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and imap_server_host is None:  # noqa: E501
            raise ValueError("Invalid value for `imap_server_host`, must not be `None`")  # noqa: E501

        self._imap_server_host = imap_server_host

    @property
    def imap_server_port(self):
        """Gets the imap_server_port of this ImapAccessDetails.  # noqa: E501

        IMAP server host port  # noqa: E501

        :return: The imap_server_port of this ImapAccessDetails.  # noqa: E501
        :rtype: int
        """
        return self._imap_server_port

    @imap_server_port.setter
    def imap_server_port(self, imap_server_port):
        """Sets the imap_server_port of this ImapAccessDetails.

        IMAP server host port  # noqa: E501

        :param imap_server_port: The imap_server_port of this ImapAccessDetails.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and imap_server_port is None:  # noqa: E501
            raise ValueError("Invalid value for `imap_server_port`, must not be `None`")  # noqa: E501

        self._imap_server_port = imap_server_port

    @property
    def imap_username(self):
        """Gets the imap_username of this ImapAccessDetails.  # noqa: E501

        IMAP username for login  # noqa: E501

        :return: The imap_username of this ImapAccessDetails.  # noqa: E501
        :rtype: str
        """
        return self._imap_username

    @imap_username.setter
    def imap_username(self, imap_username):
        """Sets the imap_username of this ImapAccessDetails.

        IMAP username for login  # noqa: E501

        :param imap_username: The imap_username of this ImapAccessDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and imap_username is None:  # noqa: E501
            raise ValueError("Invalid value for `imap_username`, must not be `None`")  # noqa: E501

        self._imap_username = imap_username

    @property
    def imap_password(self):
        """Gets the imap_password of this ImapAccessDetails.  # noqa: E501

        IMAP password for login  # noqa: E501

        :return: The imap_password of this ImapAccessDetails.  # noqa: E501
        :rtype: str
        """
        return self._imap_password

    @imap_password.setter
    def imap_password(self, imap_password):
        """Sets the imap_password of this ImapAccessDetails.

        IMAP password for login  # noqa: E501

        :param imap_password: The imap_password of this ImapAccessDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and imap_password is None:  # noqa: E501
            raise ValueError("Invalid value for `imap_password`, must not be `None`")  # noqa: E501

        self._imap_password = imap_password

    @property
    def imap_mailbox(self):
        """Gets the imap_mailbox of this ImapAccessDetails.  # noqa: E501

        IMAP mailbox to SELECT  # noqa: E501

        :return: The imap_mailbox of this ImapAccessDetails.  # noqa: E501
        :rtype: str
        """
        return self._imap_mailbox

    @imap_mailbox.setter
    def imap_mailbox(self, imap_mailbox):
        """Sets the imap_mailbox of this ImapAccessDetails.

        IMAP mailbox to SELECT  # noqa: E501

        :param imap_mailbox: The imap_mailbox of this ImapAccessDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and imap_mailbox is None:  # noqa: E501
            raise ValueError("Invalid value for `imap_mailbox`, must not be `None`")  # noqa: E501

        self._imap_mailbox = imap_mailbox

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImapAccessDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImapAccessDetails):
            return True

        return self.to_dict() != other.to_dict()
