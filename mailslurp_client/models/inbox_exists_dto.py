# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class InboxExistsDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'exists': 'bool',
        'soft_bounce': 'bool',
        'hard_bounce': 'bool'
    }

    attribute_map = {
        'exists': 'exists',
        'soft_bounce': 'softBounce',
        'hard_bounce': 'hardBounce'
    }

    def __init__(self, exists=None, soft_bounce=None, hard_bounce=None, local_vars_configuration=None):  # noqa: E501
        """InboxExistsDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._exists = None
        self._soft_bounce = None
        self._hard_bounce = None
        self.discriminator = None

        self.exists = exists
        self.soft_bounce = soft_bounce
        self.hard_bounce = hard_bounce

    @property
    def exists(self):
        """Gets the exists of this InboxExistsDto.  # noqa: E501


        :return: The exists of this InboxExistsDto.  # noqa: E501
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """Sets the exists of this InboxExistsDto.


        :param exists: The exists of this InboxExistsDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and exists is None:  # noqa: E501
            raise ValueError("Invalid value for `exists`, must not be `None`")  # noqa: E501

        self._exists = exists

    @property
    def soft_bounce(self):
        """Gets the soft_bounce of this InboxExistsDto.  # noqa: E501

        Inbox is full or simulating a soft bounce via inbox replier or rulesets  # noqa: E501

        :return: The soft_bounce of this InboxExistsDto.  # noqa: E501
        :rtype: bool
        """
        return self._soft_bounce

    @soft_bounce.setter
    def soft_bounce(self, soft_bounce):
        """Sets the soft_bounce of this InboxExistsDto.

        Inbox is full or simulating a soft bounce via inbox replier or rulesets  # noqa: E501

        :param soft_bounce: The soft_bounce of this InboxExistsDto.  # noqa: E501
        :type: bool
        """

        self._soft_bounce = soft_bounce

    @property
    def hard_bounce(self):
        """Gets the hard_bounce of this InboxExistsDto.  # noqa: E501

        Inbox is blocking receiving emails or simulating a hard bounce via inbox replier or rulesets  # noqa: E501

        :return: The hard_bounce of this InboxExistsDto.  # noqa: E501
        :rtype: bool
        """
        return self._hard_bounce

    @hard_bounce.setter
    def hard_bounce(self, hard_bounce):
        """Sets the hard_bounce of this InboxExistsDto.

        Inbox is blocking receiving emails or simulating a hard bounce via inbox replier or rulesets  # noqa: E501

        :param hard_bounce: The hard_bounce of this InboxExistsDto.  # noqa: E501
        :type: bool
        """

        self._hard_bounce = hard_bounce

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InboxExistsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InboxExistsDto):
            return True

        return self.to_dict() != other.to_dict()
