# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class TotpDeviceDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'username': 'str',
        'issuer': 'str',
        'digits': 'int',
        'period': 'int',
        'algorithm': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'username': 'username',
        'issuer': 'issuer',
        'digits': 'digits',
        'period': 'period',
        'algorithm': 'algorithm',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, name=None, username=None, issuer=None, digits=None, period=None, algorithm=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """TotpDeviceDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._username = None
        self._issuer = None
        self._digits = None
        self._period = None
        self._algorithm = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.username = username
        self.issuer = issuer
        self.digits = digits
        self.period = period
        self.algorithm = algorithm
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this TotpDeviceDto.  # noqa: E501


        :return: The id of this TotpDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TotpDeviceDto.


        :param id: The id of this TotpDeviceDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TotpDeviceDto.  # noqa: E501


        :return: The name of this TotpDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TotpDeviceDto.


        :param name: The name of this TotpDeviceDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this TotpDeviceDto.  # noqa: E501


        :return: The username of this TotpDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TotpDeviceDto.


        :param username: The username of this TotpDeviceDto.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def issuer(self):
        """Gets the issuer of this TotpDeviceDto.  # noqa: E501


        :return: The issuer of this TotpDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this TotpDeviceDto.


        :param issuer: The issuer of this TotpDeviceDto.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def digits(self):
        """Gets the digits of this TotpDeviceDto.  # noqa: E501


        :return: The digits of this TotpDeviceDto.  # noqa: E501
        :rtype: int
        """
        return self._digits

    @digits.setter
    def digits(self, digits):
        """Sets the digits of this TotpDeviceDto.


        :param digits: The digits of this TotpDeviceDto.  # noqa: E501
        :type: int
        """

        self._digits = digits

    @property
    def period(self):
        """Gets the period of this TotpDeviceDto.  # noqa: E501


        :return: The period of this TotpDeviceDto.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this TotpDeviceDto.


        :param period: The period of this TotpDeviceDto.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def algorithm(self):
        """Gets the algorithm of this TotpDeviceDto.  # noqa: E501


        :return: The algorithm of this TotpDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this TotpDeviceDto.


        :param algorithm: The algorithm of this TotpDeviceDto.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    @property
    def created_at(self):
        """Gets the created_at of this TotpDeviceDto.  # noqa: E501


        :return: The created_at of this TotpDeviceDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TotpDeviceDto.


        :param created_at: The created_at of this TotpDeviceDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TotpDeviceDto.  # noqa: E501


        :return: The updated_at of this TotpDeviceDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TotpDeviceDto.


        :param updated_at: The updated_at of this TotpDeviceDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TotpDeviceDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TotpDeviceDto):
            return True

        return self.to_dict() != other.to_dict()
