# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class PhoneNumberValidationDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'country_code': 'str',
        'country_prefix': 'str',
        'phone_number': 'str',
        'is_valid': 'bool',
        'validation_errors': 'list[str]'
    }

    attribute_map = {
        'country_code': 'countryCode',
        'country_prefix': 'countryPrefix',
        'phone_number': 'phoneNumber',
        'is_valid': 'isValid',
        'validation_errors': 'validationErrors'
    }

    def __init__(self, country_code=None, country_prefix=None, phone_number=None, is_valid=None, validation_errors=None, local_vars_configuration=None):  # noqa: E501
        """PhoneNumberValidationDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._country_code = None
        self._country_prefix = None
        self._phone_number = None
        self._is_valid = None
        self._validation_errors = None
        self.discriminator = None

        if country_code is not None:
            self.country_code = country_code
        if country_prefix is not None:
            self.country_prefix = country_prefix
        self.phone_number = phone_number
        self.is_valid = is_valid
        if validation_errors is not None:
            self.validation_errors = validation_errors

    @property
    def country_code(self):
        """Gets the country_code of this PhoneNumberValidationDto.  # noqa: E501


        :return: The country_code of this PhoneNumberValidationDto.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PhoneNumberValidationDto.


        :param country_code: The country_code of this PhoneNumberValidationDto.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country_prefix(self):
        """Gets the country_prefix of this PhoneNumberValidationDto.  # noqa: E501


        :return: The country_prefix of this PhoneNumberValidationDto.  # noqa: E501
        :rtype: str
        """
        return self._country_prefix

    @country_prefix.setter
    def country_prefix(self, country_prefix):
        """Sets the country_prefix of this PhoneNumberValidationDto.


        :param country_prefix: The country_prefix of this PhoneNumberValidationDto.  # noqa: E501
        :type: str
        """

        self._country_prefix = country_prefix

    @property
    def phone_number(self):
        """Gets the phone_number of this PhoneNumberValidationDto.  # noqa: E501


        :return: The phone_number of this PhoneNumberValidationDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this PhoneNumberValidationDto.


        :param phone_number: The phone_number of this PhoneNumberValidationDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and phone_number is None:  # noqa: E501
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def is_valid(self):
        """Gets the is_valid of this PhoneNumberValidationDto.  # noqa: E501


        :return: The is_valid of this PhoneNumberValidationDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this PhoneNumberValidationDto.


        :param is_valid: The is_valid of this PhoneNumberValidationDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_valid is None:  # noqa: E501
            raise ValueError("Invalid value for `is_valid`, must not be `None`")  # noqa: E501

        self._is_valid = is_valid

    @property
    def validation_errors(self):
        """Gets the validation_errors of this PhoneNumberValidationDto.  # noqa: E501


        :return: The validation_errors of this PhoneNumberValidationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this PhoneNumberValidationDto.


        :param validation_errors: The validation_errors of this PhoneNumberValidationDto.  # noqa: E501
        :type: list[str]
        """

        self._validation_errors = validation_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneNumberValidationDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PhoneNumberValidationDto):
            return True

        return self.to_dict() != other.to_dict()
