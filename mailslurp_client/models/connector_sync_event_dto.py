# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ConnectorSyncEventDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'connector_id': 'str',
        'sync_status': 'str',
        'sync_count': 'int',
        'message': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'connector_id': 'connectorId',
        'sync_status': 'syncStatus',
        'sync_count': 'syncCount',
        'message': 'message',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, connector_id=None, sync_status=None, sync_count=None, message=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """ConnectorSyncEventDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._connector_id = None
        self._sync_status = None
        self._sync_count = None
        self._message = None
        self._created_at = None
        self.discriminator = None

        self.id = id
        self.connector_id = connector_id
        self.sync_status = sync_status
        self.sync_count = sync_count
        if message is not None:
            self.message = message
        self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this ConnectorSyncEventDto.  # noqa: E501


        :return: The id of this ConnectorSyncEventDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorSyncEventDto.


        :param id: The id of this ConnectorSyncEventDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def connector_id(self):
        """Gets the connector_id of this ConnectorSyncEventDto.  # noqa: E501


        :return: The connector_id of this ConnectorSyncEventDto.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this ConnectorSyncEventDto.


        :param connector_id: The connector_id of this ConnectorSyncEventDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_id is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_id`, must not be `None`")  # noqa: E501

        self._connector_id = connector_id

    @property
    def sync_status(self):
        """Gets the sync_status of this ConnectorSyncEventDto.  # noqa: E501


        :return: The sync_status of this ConnectorSyncEventDto.  # noqa: E501
        :rtype: str
        """
        return self._sync_status

    @sync_status.setter
    def sync_status(self, sync_status):
        """Sets the sync_status of this ConnectorSyncEventDto.


        :param sync_status: The sync_status of this ConnectorSyncEventDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sync_status is None:  # noqa: E501
            raise ValueError("Invalid value for `sync_status`, must not be `None`")  # noqa: E501
        allowed_values = ["SUCCESS", "INTERNAL_ERROR", "SUBSCRIPTION_ERROR", "CONNECTION_ERROR", "NOT_FOUND"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sync_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sync_status` ({0}), must be one of {1}"  # noqa: E501
                .format(sync_status, allowed_values)
            )

        self._sync_status = sync_status

    @property
    def sync_count(self):
        """Gets the sync_count of this ConnectorSyncEventDto.  # noqa: E501


        :return: The sync_count of this ConnectorSyncEventDto.  # noqa: E501
        :rtype: int
        """
        return self._sync_count

    @sync_count.setter
    def sync_count(self, sync_count):
        """Sets the sync_count of this ConnectorSyncEventDto.


        :param sync_count: The sync_count of this ConnectorSyncEventDto.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and sync_count is None:  # noqa: E501
            raise ValueError("Invalid value for `sync_count`, must not be `None`")  # noqa: E501

        self._sync_count = sync_count

    @property
    def message(self):
        """Gets the message of this ConnectorSyncEventDto.  # noqa: E501


        :return: The message of this ConnectorSyncEventDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ConnectorSyncEventDto.


        :param message: The message of this ConnectorSyncEventDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def created_at(self):
        """Gets the created_at of this ConnectorSyncEventDto.  # noqa: E501


        :return: The created_at of this ConnectorSyncEventDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConnectorSyncEventDto.


        :param created_at: The created_at of this ConnectorSyncEventDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorSyncEventDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectorSyncEventDto):
            return True

        return self.to_dict() != other.to_dict()
