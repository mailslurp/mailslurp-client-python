# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CreatePortalOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'domain_id': 'str',
        'description': 'str',
        'link_help': 'str'
    }

    attribute_map = {
        'name': 'name',
        'domain_id': 'domainId',
        'description': 'description',
        'link_help': 'linkHelp'
    }

    def __init__(self, name=None, domain_id=None, description=None, link_help=None, local_vars_configuration=None):  # noqa: E501
        """CreatePortalOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._domain_id = None
        self._description = None
        self._link_help = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if domain_id is not None:
            self.domain_id = domain_id
        if description is not None:
            self.description = description
        if link_help is not None:
            self.link_help = link_help

    @property
    def name(self):
        """Gets the name of this CreatePortalOptions.  # noqa: E501


        :return: The name of this CreatePortalOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePortalOptions.


        :param name: The name of this CreatePortalOptions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def domain_id(self):
        """Gets the domain_id of this CreatePortalOptions.  # noqa: E501


        :return: The domain_id of this CreatePortalOptions.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this CreatePortalOptions.


        :param domain_id: The domain_id of this CreatePortalOptions.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def description(self):
        """Gets the description of this CreatePortalOptions.  # noqa: E501


        :return: The description of this CreatePortalOptions.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePortalOptions.


        :param description: The description of this CreatePortalOptions.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def link_help(self):
        """Gets the link_help of this CreatePortalOptions.  # noqa: E501


        :return: The link_help of this CreatePortalOptions.  # noqa: E501
        :rtype: str
        """
        return self._link_help

    @link_help.setter
    def link_help(self, link_help):
        """Sets the link_help of this CreatePortalOptions.


        :param link_help: The link_help of this CreatePortalOptions.  # noqa: E501
        :type: str
        """

        self._link_help = link_help

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePortalOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreatePortalOptions):
            return True

        return self.to_dict() != other.to_dict()
