# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class SendWithQueueResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'user_id': 'str',
        'subject': 'str',
        'inbox_id': 'str',
        'header_id': 'str',
        'delivered': 'bool',
        'exception_name': 'str',
        'message': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'subject': 'subject',
        'inbox_id': 'inboxId',
        'header_id': 'headerId',
        'delivered': 'delivered',
        'exception_name': 'exceptionName',
        'message': 'message',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, user_id=None, subject=None, inbox_id=None, header_id=None, delivered=None, exception_name=None, message=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """SendWithQueueResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user_id = None
        self._subject = None
        self._inbox_id = None
        self._header_id = None
        self._delivered = None
        self._exception_name = None
        self._message = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        self.id = id
        self.user_id = user_id
        if subject is not None:
            self.subject = subject
        if inbox_id is not None:
            self.inbox_id = inbox_id
        self.header_id = header_id
        self.delivered = delivered
        if exception_name is not None:
            self.exception_name = exception_name
        if message is not None:
            self.message = message
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this SendWithQueueResult.  # noqa: E501


        :return: The id of this SendWithQueueResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SendWithQueueResult.


        :param id: The id of this SendWithQueueResult.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this SendWithQueueResult.  # noqa: E501


        :return: The user_id of this SendWithQueueResult.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SendWithQueueResult.


        :param user_id: The user_id of this SendWithQueueResult.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def subject(self):
        """Gets the subject of this SendWithQueueResult.  # noqa: E501


        :return: The subject of this SendWithQueueResult.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendWithQueueResult.


        :param subject: The subject of this SendWithQueueResult.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def inbox_id(self):
        """Gets the inbox_id of this SendWithQueueResult.  # noqa: E501


        :return: The inbox_id of this SendWithQueueResult.  # noqa: E501
        :rtype: str
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this SendWithQueueResult.


        :param inbox_id: The inbox_id of this SendWithQueueResult.  # noqa: E501
        :type: str
        """

        self._inbox_id = inbox_id

    @property
    def header_id(self):
        """Gets the header_id of this SendWithQueueResult.  # noqa: E501


        :return: The header_id of this SendWithQueueResult.  # noqa: E501
        :rtype: str
        """
        return self._header_id

    @header_id.setter
    def header_id(self, header_id):
        """Sets the header_id of this SendWithQueueResult.


        :param header_id: The header_id of this SendWithQueueResult.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and header_id is None:  # noqa: E501
            raise ValueError("Invalid value for `header_id`, must not be `None`")  # noqa: E501

        self._header_id = header_id

    @property
    def delivered(self):
        """Gets the delivered of this SendWithQueueResult.  # noqa: E501


        :return: The delivered of this SendWithQueueResult.  # noqa: E501
        :rtype: bool
        """
        return self._delivered

    @delivered.setter
    def delivered(self, delivered):
        """Sets the delivered of this SendWithQueueResult.


        :param delivered: The delivered of this SendWithQueueResult.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and delivered is None:  # noqa: E501
            raise ValueError("Invalid value for `delivered`, must not be `None`")  # noqa: E501

        self._delivered = delivered

    @property
    def exception_name(self):
        """Gets the exception_name of this SendWithQueueResult.  # noqa: E501


        :return: The exception_name of this SendWithQueueResult.  # noqa: E501
        :rtype: str
        """
        return self._exception_name

    @exception_name.setter
    def exception_name(self, exception_name):
        """Sets the exception_name of this SendWithQueueResult.


        :param exception_name: The exception_name of this SendWithQueueResult.  # noqa: E501
        :type: str
        """

        self._exception_name = exception_name

    @property
    def message(self):
        """Gets the message of this SendWithQueueResult.  # noqa: E501


        :return: The message of this SendWithQueueResult.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SendWithQueueResult.


        :param message: The message of this SendWithQueueResult.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def created_at(self):
        """Gets the created_at of this SendWithQueueResult.  # noqa: E501


        :return: The created_at of this SendWithQueueResult.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SendWithQueueResult.


        :param created_at: The created_at of this SendWithQueueResult.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SendWithQueueResult.  # noqa: E501


        :return: The updated_at of this SendWithQueueResult.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SendWithQueueResult.


        :param updated_at: The updated_at of this SendWithQueueResult.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendWithQueueResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SendWithQueueResult):
            return True

        return self.to_dict() != other.to_dict()
