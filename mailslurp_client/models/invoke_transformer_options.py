# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class InvokeTransformerOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ai_transform_id': 'str',
        'ai_transform_mapping_id': 'str',
        'raw_input': 'str',
        'entity_id': 'str',
        'entity_type': 'str',
        'raw_conditions': 'list[str]',
        'raw_instructions': 'list[str]',
        'raw_output_schema': 'StructuredOutputSchema',
        'content_selector': 'str'
    }

    attribute_map = {
        'ai_transform_id': 'aiTransformId',
        'ai_transform_mapping_id': 'aiTransformMappingId',
        'raw_input': 'rawInput',
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'raw_conditions': 'rawConditions',
        'raw_instructions': 'rawInstructions',
        'raw_output_schema': 'rawOutputSchema',
        'content_selector': 'contentSelector'
    }

    def __init__(self, ai_transform_id=None, ai_transform_mapping_id=None, raw_input=None, entity_id=None, entity_type=None, raw_conditions=None, raw_instructions=None, raw_output_schema=None, content_selector=None, local_vars_configuration=None):  # noqa: E501
        """InvokeTransformerOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ai_transform_id = None
        self._ai_transform_mapping_id = None
        self._raw_input = None
        self._entity_id = None
        self._entity_type = None
        self._raw_conditions = None
        self._raw_instructions = None
        self._raw_output_schema = None
        self._content_selector = None
        self.discriminator = None

        if ai_transform_id is not None:
            self.ai_transform_id = ai_transform_id
        if ai_transform_mapping_id is not None:
            self.ai_transform_mapping_id = ai_transform_mapping_id
        if raw_input is not None:
            self.raw_input = raw_input
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_type is not None:
            self.entity_type = entity_type
        if raw_conditions is not None:
            self.raw_conditions = raw_conditions
        if raw_instructions is not None:
            self.raw_instructions = raw_instructions
        self.raw_output_schema = raw_output_schema
        if content_selector is not None:
            self.content_selector = content_selector

    @property
    def ai_transform_id(self):
        """Gets the ai_transform_id of this InvokeTransformerOptions.  # noqa: E501


        :return: The ai_transform_id of this InvokeTransformerOptions.  # noqa: E501
        :rtype: str
        """
        return self._ai_transform_id

    @ai_transform_id.setter
    def ai_transform_id(self, ai_transform_id):
        """Sets the ai_transform_id of this InvokeTransformerOptions.


        :param ai_transform_id: The ai_transform_id of this InvokeTransformerOptions.  # noqa: E501
        :type: str
        """

        self._ai_transform_id = ai_transform_id

    @property
    def ai_transform_mapping_id(self):
        """Gets the ai_transform_mapping_id of this InvokeTransformerOptions.  # noqa: E501


        :return: The ai_transform_mapping_id of this InvokeTransformerOptions.  # noqa: E501
        :rtype: str
        """
        return self._ai_transform_mapping_id

    @ai_transform_mapping_id.setter
    def ai_transform_mapping_id(self, ai_transform_mapping_id):
        """Sets the ai_transform_mapping_id of this InvokeTransformerOptions.


        :param ai_transform_mapping_id: The ai_transform_mapping_id of this InvokeTransformerOptions.  # noqa: E501
        :type: str
        """

        self._ai_transform_mapping_id = ai_transform_mapping_id

    @property
    def raw_input(self):
        """Gets the raw_input of this InvokeTransformerOptions.  # noqa: E501


        :return: The raw_input of this InvokeTransformerOptions.  # noqa: E501
        :rtype: str
        """
        return self._raw_input

    @raw_input.setter
    def raw_input(self, raw_input):
        """Sets the raw_input of this InvokeTransformerOptions.


        :param raw_input: The raw_input of this InvokeTransformerOptions.  # noqa: E501
        :type: str
        """

        self._raw_input = raw_input

    @property
    def entity_id(self):
        """Gets the entity_id of this InvokeTransformerOptions.  # noqa: E501


        :return: The entity_id of this InvokeTransformerOptions.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this InvokeTransformerOptions.


        :param entity_id: The entity_id of this InvokeTransformerOptions.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this InvokeTransformerOptions.  # noqa: E501


        :return: The entity_type of this InvokeTransformerOptions.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this InvokeTransformerOptions.


        :param entity_type: The entity_type of this InvokeTransformerOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["EMAIL", "SMS", "ATTACHMENT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and entity_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def raw_conditions(self):
        """Gets the raw_conditions of this InvokeTransformerOptions.  # noqa: E501


        :return: The raw_conditions of this InvokeTransformerOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._raw_conditions

    @raw_conditions.setter
    def raw_conditions(self, raw_conditions):
        """Sets the raw_conditions of this InvokeTransformerOptions.


        :param raw_conditions: The raw_conditions of this InvokeTransformerOptions.  # noqa: E501
        :type: list[str]
        """

        self._raw_conditions = raw_conditions

    @property
    def raw_instructions(self):
        """Gets the raw_instructions of this InvokeTransformerOptions.  # noqa: E501


        :return: The raw_instructions of this InvokeTransformerOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._raw_instructions

    @raw_instructions.setter
    def raw_instructions(self, raw_instructions):
        """Sets the raw_instructions of this InvokeTransformerOptions.


        :param raw_instructions: The raw_instructions of this InvokeTransformerOptions.  # noqa: E501
        :type: list[str]
        """

        self._raw_instructions = raw_instructions

    @property
    def raw_output_schema(self):
        """Gets the raw_output_schema of this InvokeTransformerOptions.  # noqa: E501


        :return: The raw_output_schema of this InvokeTransformerOptions.  # noqa: E501
        :rtype: StructuredOutputSchema
        """
        return self._raw_output_schema

    @raw_output_schema.setter
    def raw_output_schema(self, raw_output_schema):
        """Sets the raw_output_schema of this InvokeTransformerOptions.


        :param raw_output_schema: The raw_output_schema of this InvokeTransformerOptions.  # noqa: E501
        :type: StructuredOutputSchema
        """

        self._raw_output_schema = raw_output_schema

    @property
    def content_selector(self):
        """Gets the content_selector of this InvokeTransformerOptions.  # noqa: E501


        :return: The content_selector of this InvokeTransformerOptions.  # noqa: E501
        :rtype: str
        """
        return self._content_selector

    @content_selector.setter
    def content_selector(self, content_selector):
        """Sets the content_selector of this InvokeTransformerOptions.


        :param content_selector: The content_selector of this InvokeTransformerOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["RAW", "BODY", "BODY_ATTACHMENTS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and content_selector not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `content_selector` ({0}), must be one of {1}"  # noqa: E501
                .format(content_selector, allowed_values)
            )

        self._content_selector = content_selector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvokeTransformerOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvokeTransformerOptions):
            return True

        return self.to_dict() != other.to_dict()
