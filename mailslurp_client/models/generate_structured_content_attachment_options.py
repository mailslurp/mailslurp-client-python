# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class GenerateStructuredContentAttachmentOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attachment_id': 'str',
        'instructions': 'str',
        'output_schema': 'StructuredOutputSchema'
    }

    attribute_map = {
        'attachment_id': 'attachmentId',
        'instructions': 'instructions',
        'output_schema': 'outputSchema'
    }

    def __init__(self, attachment_id=None, instructions=None, output_schema=None, local_vars_configuration=None):  # noqa: E501
        """GenerateStructuredContentAttachmentOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._attachment_id = None
        self._instructions = None
        self._output_schema = None
        self.discriminator = None

        self.attachment_id = attachment_id
        if instructions is not None:
            self.instructions = instructions
        self.output_schema = output_schema

    @property
    def attachment_id(self):
        """Gets the attachment_id of this GenerateStructuredContentAttachmentOptions.  # noqa: E501

        Attachment ID to read and pass to AI  # noqa: E501

        :return: The attachment_id of this GenerateStructuredContentAttachmentOptions.  # noqa: E501
        :rtype: str
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this GenerateStructuredContentAttachmentOptions.

        Attachment ID to read and pass to AI  # noqa: E501

        :param attachment_id: The attachment_id of this GenerateStructuredContentAttachmentOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and attachment_id is None:  # noqa: E501
            raise ValueError("Invalid value for `attachment_id`, must not be `None`")  # noqa: E501

        self._attachment_id = attachment_id

    @property
    def instructions(self):
        """Gets the instructions of this GenerateStructuredContentAttachmentOptions.  # noqa: E501

        Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.  # noqa: E501

        :return: The instructions of this GenerateStructuredContentAttachmentOptions.  # noqa: E501
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this GenerateStructuredContentAttachmentOptions.

        Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.  # noqa: E501

        :param instructions: The instructions of this GenerateStructuredContentAttachmentOptions.  # noqa: E501
        :type: str
        """

        self._instructions = instructions

    @property
    def output_schema(self):
        """Gets the output_schema of this GenerateStructuredContentAttachmentOptions.  # noqa: E501


        :return: The output_schema of this GenerateStructuredContentAttachmentOptions.  # noqa: E501
        :rtype: StructuredOutputSchema
        """
        return self._output_schema

    @output_schema.setter
    def output_schema(self, output_schema):
        """Sets the output_schema of this GenerateStructuredContentAttachmentOptions.


        :param output_schema: The output_schema of this GenerateStructuredContentAttachmentOptions.  # noqa: E501
        :type: StructuredOutputSchema
        """
        if self.local_vars_configuration.client_side_validation and output_schema is None:  # noqa: E501
            raise ValueError("Invalid value for `output_schema`, must not be `None`")  # noqa: E501

        self._output_schema = output_schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateStructuredContentAttachmentOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateStructuredContentAttachmentOptions):
            return True

        return self.to_dict() != other.to_dict()
