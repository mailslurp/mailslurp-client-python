# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CreateConnectorOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connector_type': 'str',
        'connector_auth_type': 'str',
        'imap_settings': 'CreateConnectorImapOptions',
        'inbox_id': 'str',
        'sync_enabled': 'bool',
        'sync_schedule_type': 'str',
        'sync_interval': 'int',
        'fetch_settings': 'CreateConnectorImapFetchOptions'
    }

    attribute_map = {
        'connector_type': 'connectorType',
        'connector_auth_type': 'connectorAuthType',
        'imap_settings': 'imapSettings',
        'inbox_id': 'inboxId',
        'sync_enabled': 'syncEnabled',
        'sync_schedule_type': 'syncScheduleType',
        'sync_interval': 'syncInterval',
        'fetch_settings': 'fetchSettings'
    }

    def __init__(self, connector_type=None, connector_auth_type=None, imap_settings=None, inbox_id=None, sync_enabled=None, sync_schedule_type=None, sync_interval=None, fetch_settings=None, local_vars_configuration=None):  # noqa: E501
        """CreateConnectorOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._connector_type = None
        self._connector_auth_type = None
        self._imap_settings = None
        self._inbox_id = None
        self._sync_enabled = None
        self._sync_schedule_type = None
        self._sync_interval = None
        self._fetch_settings = None
        self.discriminator = None

        self.connector_type = connector_type
        self.connector_auth_type = connector_auth_type
        if imap_settings is not None:
            self.imap_settings = imap_settings
        if inbox_id is not None:
            self.inbox_id = inbox_id
        self.sync_enabled = sync_enabled
        self.sync_schedule_type = sync_schedule_type
        if sync_interval is not None:
            self.sync_interval = sync_interval
        if fetch_settings is not None:
            self.fetch_settings = fetch_settings

    @property
    def connector_type(self):
        """Gets the connector_type of this CreateConnectorOptions.  # noqa: E501


        :return: The connector_type of this CreateConnectorOptions.  # noqa: E501
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this CreateConnectorOptions.


        :param connector_type: The connector_type of this CreateConnectorOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_type is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_type`, must not be `None`")  # noqa: E501
        allowed_values = ["IMAP"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and connector_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `connector_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connector_type, allowed_values)
            )

        self._connector_type = connector_type

    @property
    def connector_auth_type(self):
        """Gets the connector_auth_type of this CreateConnectorOptions.  # noqa: E501


        :return: The connector_auth_type of this CreateConnectorOptions.  # noqa: E501
        :rtype: str
        """
        return self._connector_auth_type

    @connector_auth_type.setter
    def connector_auth_type(self, connector_auth_type):
        """Sets the connector_auth_type of this CreateConnectorOptions.


        :param connector_auth_type: The connector_auth_type of this CreateConnectorOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_auth_type is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_auth_type`, must not be `None`")  # noqa: E501
        allowed_values = ["PLAIN_TEXT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and connector_auth_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `connector_auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connector_auth_type, allowed_values)
            )

        self._connector_auth_type = connector_auth_type

    @property
    def imap_settings(self):
        """Gets the imap_settings of this CreateConnectorOptions.  # noqa: E501


        :return: The imap_settings of this CreateConnectorOptions.  # noqa: E501
        :rtype: CreateConnectorImapOptions
        """
        return self._imap_settings

    @imap_settings.setter
    def imap_settings(self, imap_settings):
        """Sets the imap_settings of this CreateConnectorOptions.


        :param imap_settings: The imap_settings of this CreateConnectorOptions.  # noqa: E501
        :type: CreateConnectorImapOptions
        """

        self._imap_settings = imap_settings

    @property
    def inbox_id(self):
        """Gets the inbox_id of this CreateConnectorOptions.  # noqa: E501


        :return: The inbox_id of this CreateConnectorOptions.  # noqa: E501
        :rtype: str
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this CreateConnectorOptions.


        :param inbox_id: The inbox_id of this CreateConnectorOptions.  # noqa: E501
        :type: str
        """

        self._inbox_id = inbox_id

    @property
    def sync_enabled(self):
        """Gets the sync_enabled of this CreateConnectorOptions.  # noqa: E501


        :return: The sync_enabled of this CreateConnectorOptions.  # noqa: E501
        :rtype: bool
        """
        return self._sync_enabled

    @sync_enabled.setter
    def sync_enabled(self, sync_enabled):
        """Sets the sync_enabled of this CreateConnectorOptions.


        :param sync_enabled: The sync_enabled of this CreateConnectorOptions.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and sync_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `sync_enabled`, must not be `None`")  # noqa: E501

        self._sync_enabled = sync_enabled

    @property
    def sync_schedule_type(self):
        """Gets the sync_schedule_type of this CreateConnectorOptions.  # noqa: E501


        :return: The sync_schedule_type of this CreateConnectorOptions.  # noqa: E501
        :rtype: str
        """
        return self._sync_schedule_type

    @sync_schedule_type.setter
    def sync_schedule_type(self, sync_schedule_type):
        """Sets the sync_schedule_type of this CreateConnectorOptions.


        :param sync_schedule_type: The sync_schedule_type of this CreateConnectorOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sync_schedule_type is None:  # noqa: E501
            raise ValueError("Invalid value for `sync_schedule_type`, must not be `None`")  # noqa: E501
        allowed_values = ["INTERVAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sync_schedule_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sync_schedule_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sync_schedule_type, allowed_values)
            )

        self._sync_schedule_type = sync_schedule_type

    @property
    def sync_interval(self):
        """Gets the sync_interval of this CreateConnectorOptions.  # noqa: E501


        :return: The sync_interval of this CreateConnectorOptions.  # noqa: E501
        :rtype: int
        """
        return self._sync_interval

    @sync_interval.setter
    def sync_interval(self, sync_interval):
        """Sets the sync_interval of this CreateConnectorOptions.


        :param sync_interval: The sync_interval of this CreateConnectorOptions.  # noqa: E501
        :type: int
        """

        self._sync_interval = sync_interval

    @property
    def fetch_settings(self):
        """Gets the fetch_settings of this CreateConnectorOptions.  # noqa: E501


        :return: The fetch_settings of this CreateConnectorOptions.  # noqa: E501
        :rtype: CreateConnectorImapFetchOptions
        """
        return self._fetch_settings

    @fetch_settings.setter
    def fetch_settings(self, fetch_settings):
        """Sets the fetch_settings of this CreateConnectorOptions.


        :param fetch_settings: The fetch_settings of this CreateConnectorOptions.  # noqa: E501
        :type: CreateConnectorImapFetchOptions
        """

        self._fetch_settings = fetch_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateConnectorOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateConnectorOptions):
            return True

        return self.to_dict() != other.to_dict()
