# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ConnectorDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'enabled': 'bool',
        'user_id': 'str',
        'inbox_id': 'str',
        'sync_enabled': 'bool',
        'sync_schedule_type': 'str',
        'sync_interval': 'int',
        'has_imap_connection': 'bool',
        'has_smtp_connection': 'bool',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'enabled': 'enabled',
        'user_id': 'userId',
        'inbox_id': 'inboxId',
        'sync_enabled': 'syncEnabled',
        'sync_schedule_type': 'syncScheduleType',
        'sync_interval': 'syncInterval',
        'has_imap_connection': 'hasImapConnection',
        'has_smtp_connection': 'hasSmtpConnection',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, name=None, enabled=None, user_id=None, inbox_id=None, sync_enabled=None, sync_schedule_type=None, sync_interval=None, has_imap_connection=None, has_smtp_connection=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """ConnectorDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._enabled = None
        self._user_id = None
        self._inbox_id = None
        self._sync_enabled = None
        self._sync_schedule_type = None
        self._sync_interval = None
        self._has_imap_connection = None
        self._has_smtp_connection = None
        self._created_at = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.enabled = enabled
        self.user_id = user_id
        self.inbox_id = inbox_id
        self.sync_enabled = sync_enabled
        self.sync_schedule_type = sync_schedule_type
        self.sync_interval = sync_interval
        self.has_imap_connection = has_imap_connection
        self.has_smtp_connection = has_smtp_connection
        self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this ConnectorDto.  # noqa: E501


        :return: The id of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorDto.


        :param id: The id of this ConnectorDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConnectorDto.  # noqa: E501


        :return: The name of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectorDto.


        :param name: The name of this ConnectorDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this ConnectorDto.  # noqa: E501


        :return: The enabled of this ConnectorDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConnectorDto.


        :param enabled: The enabled of this ConnectorDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def user_id(self):
        """Gets the user_id of this ConnectorDto.  # noqa: E501


        :return: The user_id of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ConnectorDto.


        :param user_id: The user_id of this ConnectorDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def inbox_id(self):
        """Gets the inbox_id of this ConnectorDto.  # noqa: E501


        :return: The inbox_id of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this ConnectorDto.


        :param inbox_id: The inbox_id of this ConnectorDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and inbox_id is None:  # noqa: E501
            raise ValueError("Invalid value for `inbox_id`, must not be `None`")  # noqa: E501

        self._inbox_id = inbox_id

    @property
    def sync_enabled(self):
        """Gets the sync_enabled of this ConnectorDto.  # noqa: E501


        :return: The sync_enabled of this ConnectorDto.  # noqa: E501
        :rtype: bool
        """
        return self._sync_enabled

    @sync_enabled.setter
    def sync_enabled(self, sync_enabled):
        """Sets the sync_enabled of this ConnectorDto.


        :param sync_enabled: The sync_enabled of this ConnectorDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and sync_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `sync_enabled`, must not be `None`")  # noqa: E501

        self._sync_enabled = sync_enabled

    @property
    def sync_schedule_type(self):
        """Gets the sync_schedule_type of this ConnectorDto.  # noqa: E501


        :return: The sync_schedule_type of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._sync_schedule_type

    @sync_schedule_type.setter
    def sync_schedule_type(self, sync_schedule_type):
        """Sets the sync_schedule_type of this ConnectorDto.


        :param sync_schedule_type: The sync_schedule_type of this ConnectorDto.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"INTERVAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sync_schedule_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sync_schedule_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sync_schedule_type, allowed_values)
            )

        self._sync_schedule_type = sync_schedule_type

    @property
    def sync_interval(self):
        """Gets the sync_interval of this ConnectorDto.  # noqa: E501


        :return: The sync_interval of this ConnectorDto.  # noqa: E501
        :rtype: int
        """
        return self._sync_interval

    @sync_interval.setter
    def sync_interval(self, sync_interval):
        """Sets the sync_interval of this ConnectorDto.


        :param sync_interval: The sync_interval of this ConnectorDto.  # noqa: E501
        :type: int
        """

        self._sync_interval = sync_interval

    @property
    def has_imap_connection(self):
        """Gets the has_imap_connection of this ConnectorDto.  # noqa: E501


        :return: The has_imap_connection of this ConnectorDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_imap_connection

    @has_imap_connection.setter
    def has_imap_connection(self, has_imap_connection):
        """Sets the has_imap_connection of this ConnectorDto.


        :param has_imap_connection: The has_imap_connection of this ConnectorDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and has_imap_connection is None:  # noqa: E501
            raise ValueError("Invalid value for `has_imap_connection`, must not be `None`")  # noqa: E501

        self._has_imap_connection = has_imap_connection

    @property
    def has_smtp_connection(self):
        """Gets the has_smtp_connection of this ConnectorDto.  # noqa: E501


        :return: The has_smtp_connection of this ConnectorDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_smtp_connection

    @has_smtp_connection.setter
    def has_smtp_connection(self, has_smtp_connection):
        """Sets the has_smtp_connection of this ConnectorDto.


        :param has_smtp_connection: The has_smtp_connection of this ConnectorDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and has_smtp_connection is None:  # noqa: E501
            raise ValueError("Invalid value for `has_smtp_connection`, must not be `None`")  # noqa: E501

        self._has_smtp_connection = has_smtp_connection

    @property
    def created_at(self):
        """Gets the created_at of this ConnectorDto.  # noqa: E501


        :return: The created_at of this ConnectorDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConnectorDto.


        :param created_at: The created_at of this ConnectorDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectorDto):
            return True

        return self.to_dict() != other.to_dict()
