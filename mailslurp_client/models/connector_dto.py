# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ConnectorDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'enabled': 'bool',
        'user_id': 'str',
        'connector_type': 'str',
        'connector_auth_type': 'str',
        'sync_enabled': 'bool',
        'sync_schedule_type': 'str',
        'sync_interval': 'int',
        'imap_host': 'str',
        'imap_port': 'int',
        'imap_username': 'str',
        'imap_password': 'str',
        'imap_ssl': 'bool',
        'select_folder': 'str',
        'search_terms': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'enabled': 'enabled',
        'user_id': 'userId',
        'connector_type': 'connectorType',
        'connector_auth_type': 'connectorAuthType',
        'sync_enabled': 'syncEnabled',
        'sync_schedule_type': 'syncScheduleType',
        'sync_interval': 'syncInterval',
        'imap_host': 'imapHost',
        'imap_port': 'imapPort',
        'imap_username': 'imapUsername',
        'imap_password': 'imapPassword',
        'imap_ssl': 'imapSsl',
        'select_folder': 'selectFolder',
        'search_terms': 'searchTerms',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, enabled=None, user_id=None, connector_type=None, connector_auth_type=None, sync_enabled=None, sync_schedule_type=None, sync_interval=None, imap_host=None, imap_port=None, imap_username=None, imap_password=None, imap_ssl=None, select_folder=None, search_terms=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """ConnectorDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._enabled = None
        self._user_id = None
        self._connector_type = None
        self._connector_auth_type = None
        self._sync_enabled = None
        self._sync_schedule_type = None
        self._sync_interval = None
        self._imap_host = None
        self._imap_port = None
        self._imap_username = None
        self._imap_password = None
        self._imap_ssl = None
        self._select_folder = None
        self._search_terms = None
        self._created_at = None
        self.discriminator = None

        self.id = id
        self.enabled = enabled
        self.user_id = user_id
        self.connector_type = connector_type
        self.connector_auth_type = connector_auth_type
        self.sync_enabled = sync_enabled
        self.sync_schedule_type = sync_schedule_type
        if sync_interval is not None:
            self.sync_interval = sync_interval
        if imap_host is not None:
            self.imap_host = imap_host
        if imap_port is not None:
            self.imap_port = imap_port
        if imap_username is not None:
            self.imap_username = imap_username
        if imap_password is not None:
            self.imap_password = imap_password
        if imap_ssl is not None:
            self.imap_ssl = imap_ssl
        if select_folder is not None:
            self.select_folder = select_folder
        if search_terms is not None:
            self.search_terms = search_terms
        self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this ConnectorDto.  # noqa: E501


        :return: The id of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorDto.


        :param id: The id of this ConnectorDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def enabled(self):
        """Gets the enabled of this ConnectorDto.  # noqa: E501


        :return: The enabled of this ConnectorDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConnectorDto.


        :param enabled: The enabled of this ConnectorDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def user_id(self):
        """Gets the user_id of this ConnectorDto.  # noqa: E501


        :return: The user_id of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ConnectorDto.


        :param user_id: The user_id of this ConnectorDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def connector_type(self):
        """Gets the connector_type of this ConnectorDto.  # noqa: E501


        :return: The connector_type of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this ConnectorDto.


        :param connector_type: The connector_type of this ConnectorDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_type is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_type`, must not be `None`")  # noqa: E501
        allowed_values = ["IMAP"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and connector_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `connector_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connector_type, allowed_values)
            )

        self._connector_type = connector_type

    @property
    def connector_auth_type(self):
        """Gets the connector_auth_type of this ConnectorDto.  # noqa: E501


        :return: The connector_auth_type of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._connector_auth_type

    @connector_auth_type.setter
    def connector_auth_type(self, connector_auth_type):
        """Sets the connector_auth_type of this ConnectorDto.


        :param connector_auth_type: The connector_auth_type of this ConnectorDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_auth_type is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_auth_type`, must not be `None`")  # noqa: E501
        allowed_values = ["PLAIN_TEXT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and connector_auth_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `connector_auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connector_auth_type, allowed_values)
            )

        self._connector_auth_type = connector_auth_type

    @property
    def sync_enabled(self):
        """Gets the sync_enabled of this ConnectorDto.  # noqa: E501


        :return: The sync_enabled of this ConnectorDto.  # noqa: E501
        :rtype: bool
        """
        return self._sync_enabled

    @sync_enabled.setter
    def sync_enabled(self, sync_enabled):
        """Sets the sync_enabled of this ConnectorDto.


        :param sync_enabled: The sync_enabled of this ConnectorDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and sync_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `sync_enabled`, must not be `None`")  # noqa: E501

        self._sync_enabled = sync_enabled

    @property
    def sync_schedule_type(self):
        """Gets the sync_schedule_type of this ConnectorDto.  # noqa: E501


        :return: The sync_schedule_type of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._sync_schedule_type

    @sync_schedule_type.setter
    def sync_schedule_type(self, sync_schedule_type):
        """Sets the sync_schedule_type of this ConnectorDto.


        :param sync_schedule_type: The sync_schedule_type of this ConnectorDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sync_schedule_type is None:  # noqa: E501
            raise ValueError("Invalid value for `sync_schedule_type`, must not be `None`")  # noqa: E501
        allowed_values = ["INTERVAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sync_schedule_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sync_schedule_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sync_schedule_type, allowed_values)
            )

        self._sync_schedule_type = sync_schedule_type

    @property
    def sync_interval(self):
        """Gets the sync_interval of this ConnectorDto.  # noqa: E501


        :return: The sync_interval of this ConnectorDto.  # noqa: E501
        :rtype: int
        """
        return self._sync_interval

    @sync_interval.setter
    def sync_interval(self, sync_interval):
        """Sets the sync_interval of this ConnectorDto.


        :param sync_interval: The sync_interval of this ConnectorDto.  # noqa: E501
        :type: int
        """

        self._sync_interval = sync_interval

    @property
    def imap_host(self):
        """Gets the imap_host of this ConnectorDto.  # noqa: E501


        :return: The imap_host of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._imap_host

    @imap_host.setter
    def imap_host(self, imap_host):
        """Sets the imap_host of this ConnectorDto.


        :param imap_host: The imap_host of this ConnectorDto.  # noqa: E501
        :type: str
        """

        self._imap_host = imap_host

    @property
    def imap_port(self):
        """Gets the imap_port of this ConnectorDto.  # noqa: E501


        :return: The imap_port of this ConnectorDto.  # noqa: E501
        :rtype: int
        """
        return self._imap_port

    @imap_port.setter
    def imap_port(self, imap_port):
        """Sets the imap_port of this ConnectorDto.


        :param imap_port: The imap_port of this ConnectorDto.  # noqa: E501
        :type: int
        """

        self._imap_port = imap_port

    @property
    def imap_username(self):
        """Gets the imap_username of this ConnectorDto.  # noqa: E501


        :return: The imap_username of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._imap_username

    @imap_username.setter
    def imap_username(self, imap_username):
        """Sets the imap_username of this ConnectorDto.


        :param imap_username: The imap_username of this ConnectorDto.  # noqa: E501
        :type: str
        """

        self._imap_username = imap_username

    @property
    def imap_password(self):
        """Gets the imap_password of this ConnectorDto.  # noqa: E501


        :return: The imap_password of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._imap_password

    @imap_password.setter
    def imap_password(self, imap_password):
        """Sets the imap_password of this ConnectorDto.


        :param imap_password: The imap_password of this ConnectorDto.  # noqa: E501
        :type: str
        """

        self._imap_password = imap_password

    @property
    def imap_ssl(self):
        """Gets the imap_ssl of this ConnectorDto.  # noqa: E501


        :return: The imap_ssl of this ConnectorDto.  # noqa: E501
        :rtype: bool
        """
        return self._imap_ssl

    @imap_ssl.setter
    def imap_ssl(self, imap_ssl):
        """Sets the imap_ssl of this ConnectorDto.


        :param imap_ssl: The imap_ssl of this ConnectorDto.  # noqa: E501
        :type: bool
        """

        self._imap_ssl = imap_ssl

    @property
    def select_folder(self):
        """Gets the select_folder of this ConnectorDto.  # noqa: E501


        :return: The select_folder of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._select_folder

    @select_folder.setter
    def select_folder(self, select_folder):
        """Sets the select_folder of this ConnectorDto.


        :param select_folder: The select_folder of this ConnectorDto.  # noqa: E501
        :type: str
        """

        self._select_folder = select_folder

    @property
    def search_terms(self):
        """Gets the search_terms of this ConnectorDto.  # noqa: E501


        :return: The search_terms of this ConnectorDto.  # noqa: E501
        :rtype: str
        """
        return self._search_terms

    @search_terms.setter
    def search_terms(self, search_terms):
        """Sets the search_terms of this ConnectorDto.


        :param search_terms: The search_terms of this ConnectorDto.  # noqa: E501
        :type: str
        """

        self._search_terms = search_terms

    @property
    def created_at(self):
        """Gets the created_at of this ConnectorDto.  # noqa: E501


        :return: The created_at of this ConnectorDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConnectorDto.


        :param created_at: The created_at of this ConnectorDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectorDto):
            return True

        return self.to_dict() != other.to_dict()
