# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ConnectorEventDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'connector_id': 'str',
        'status': 'str',
        'event_type': 'str',
        'size': 'int',
        'message': 'str',
        'logs': 'str',
        'seen': 'bool',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'connector_id': 'connectorId',
        'status': 'status',
        'event_type': 'eventType',
        'size': 'size',
        'message': 'message',
        'logs': 'logs',
        'seen': 'seen',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, connector_id=None, status=None, event_type=None, size=None, message=None, logs=None, seen=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """ConnectorEventDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._connector_id = None
        self._status = None
        self._event_type = None
        self._size = None
        self._message = None
        self._logs = None
        self._seen = None
        self._created_at = None
        self.discriminator = None

        self.id = id
        self.connector_id = connector_id
        self.status = status
        self.event_type = event_type
        self.size = size
        if message is not None:
            self.message = message
        if logs is not None:
            self.logs = logs
        if seen is not None:
            self.seen = seen
        self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this ConnectorEventDto.  # noqa: E501


        :return: The id of this ConnectorEventDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorEventDto.


        :param id: The id of this ConnectorEventDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def connector_id(self):
        """Gets the connector_id of this ConnectorEventDto.  # noqa: E501


        :return: The connector_id of this ConnectorEventDto.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this ConnectorEventDto.


        :param connector_id: The connector_id of this ConnectorEventDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_id is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_id`, must not be `None`")  # noqa: E501

        self._connector_id = connector_id

    @property
    def status(self):
        """Gets the status of this ConnectorEventDto.  # noqa: E501


        :return: The status of this ConnectorEventDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectorEventDto.


        :param status: The status of this ConnectorEventDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["SUCCESS", "INTERNAL_ERROR", "SUBSCRIPTION_ERROR", "CONNECTION_ERROR", "NOT_FOUND"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def event_type(self):
        """Gets the event_type of this ConnectorEventDto.  # noqa: E501


        :return: The event_type of this ConnectorEventDto.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ConnectorEventDto.


        :param event_type: The event_type of this ConnectorEventDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and event_type is None:  # noqa: E501
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
        allowed_values = ["SEND", "SYNC"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and event_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def size(self):
        """Gets the size of this ConnectorEventDto.  # noqa: E501


        :return: The size of this ConnectorEventDto.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ConnectorEventDto.


        :param size: The size of this ConnectorEventDto.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def message(self):
        """Gets the message of this ConnectorEventDto.  # noqa: E501


        :return: The message of this ConnectorEventDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ConnectorEventDto.


        :param message: The message of this ConnectorEventDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def logs(self):
        """Gets the logs of this ConnectorEventDto.  # noqa: E501


        :return: The logs of this ConnectorEventDto.  # noqa: E501
        :rtype: str
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this ConnectorEventDto.


        :param logs: The logs of this ConnectorEventDto.  # noqa: E501
        :type: str
        """

        self._logs = logs

    @property
    def seen(self):
        """Gets the seen of this ConnectorEventDto.  # noqa: E501


        :return: The seen of this ConnectorEventDto.  # noqa: E501
        :rtype: bool
        """
        return self._seen

    @seen.setter
    def seen(self, seen):
        """Sets the seen of this ConnectorEventDto.


        :param seen: The seen of this ConnectorEventDto.  # noqa: E501
        :type: bool
        """

        self._seen = seen

    @property
    def created_at(self):
        """Gets the created_at of this ConnectorEventDto.  # noqa: E501


        :return: The created_at of this ConnectorEventDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConnectorEventDto.


        :param created_at: The created_at of this ConnectorEventDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorEventDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectorEventDto):
            return True

        return self.to_dict() != other.to_dict()
