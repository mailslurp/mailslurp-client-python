# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class GuestPortalDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'domain_id': 'str',
        'user_id': 'str',
        'name': 'str',
        'description': 'str',
        'link_help': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'login_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'domain_id': 'domainId',
        'user_id': 'userId',
        'name': 'name',
        'description': 'description',
        'link_help': 'linkHelp',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'login_url': 'loginUrl'
    }

    def __init__(self, id=None, domain_id=None, user_id=None, name=None, description=None, link_help=None, created_at=None, updated_at=None, login_url=None, local_vars_configuration=None):  # noqa: E501
        """GuestPortalDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._domain_id = None
        self._user_id = None
        self._name = None
        self._description = None
        self._link_help = None
        self._created_at = None
        self._updated_at = None
        self._login_url = None
        self.discriminator = None

        self.id = id
        if domain_id is not None:
            self.domain_id = domain_id
        self.user_id = user_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if link_help is not None:
            self.link_help = link_help
        self.created_at = created_at
        self.updated_at = updated_at
        self.login_url = login_url

    @property
    def id(self):
        """Gets the id of this GuestPortalDto.  # noqa: E501


        :return: The id of this GuestPortalDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GuestPortalDto.


        :param id: The id of this GuestPortalDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def domain_id(self):
        """Gets the domain_id of this GuestPortalDto.  # noqa: E501


        :return: The domain_id of this GuestPortalDto.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this GuestPortalDto.


        :param domain_id: The domain_id of this GuestPortalDto.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def user_id(self):
        """Gets the user_id of this GuestPortalDto.  # noqa: E501


        :return: The user_id of this GuestPortalDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GuestPortalDto.


        :param user_id: The user_id of this GuestPortalDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this GuestPortalDto.  # noqa: E501


        :return: The name of this GuestPortalDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GuestPortalDto.


        :param name: The name of this GuestPortalDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GuestPortalDto.  # noqa: E501


        :return: The description of this GuestPortalDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GuestPortalDto.


        :param description: The description of this GuestPortalDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def link_help(self):
        """Gets the link_help of this GuestPortalDto.  # noqa: E501


        :return: The link_help of this GuestPortalDto.  # noqa: E501
        :rtype: str
        """
        return self._link_help

    @link_help.setter
    def link_help(self, link_help):
        """Sets the link_help of this GuestPortalDto.


        :param link_help: The link_help of this GuestPortalDto.  # noqa: E501
        :type: str
        """

        self._link_help = link_help

    @property
    def created_at(self):
        """Gets the created_at of this GuestPortalDto.  # noqa: E501


        :return: The created_at of this GuestPortalDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GuestPortalDto.


        :param created_at: The created_at of this GuestPortalDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GuestPortalDto.  # noqa: E501


        :return: The updated_at of this GuestPortalDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GuestPortalDto.


        :param updated_at: The updated_at of this GuestPortalDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def login_url(self):
        """Gets the login_url of this GuestPortalDto.  # noqa: E501


        :return: The login_url of this GuestPortalDto.  # noqa: E501
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this GuestPortalDto.


        :param login_url: The login_url of this GuestPortalDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and login_url is None:  # noqa: E501
            raise ValueError("Invalid value for `login_url`, must not be `None`")  # noqa: E501

        self._login_url = login_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuestPortalDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GuestPortalDto):
            return True

        return self.to_dict() != other.to_dict()
