# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CheckEmailBodyResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'has_issues': 'bool',
        'link_issues': 'list[LinkIssue]',
        'image_issues': 'list[ImageIssue]',
        'spelling_issues': 'list[SpellingIssue]'
    }

    attribute_map = {
        'has_issues': 'hasIssues',
        'link_issues': 'linkIssues',
        'image_issues': 'imageIssues',
        'spelling_issues': 'spellingIssues'
    }

    def __init__(self, has_issues=None, link_issues=None, image_issues=None, spelling_issues=None, local_vars_configuration=None):  # noqa: E501
        """CheckEmailBodyResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._has_issues = None
        self._link_issues = None
        self._image_issues = None
        self._spelling_issues = None
        self.discriminator = None

        self.has_issues = has_issues
        self.link_issues = link_issues
        self.image_issues = image_issues
        self.spelling_issues = spelling_issues

    @property
    def has_issues(self):
        """Gets the has_issues of this CheckEmailBodyResults.  # noqa: E501


        :return: The has_issues of this CheckEmailBodyResults.  # noqa: E501
        :rtype: bool
        """
        return self._has_issues

    @has_issues.setter
    def has_issues(self, has_issues):
        """Sets the has_issues of this CheckEmailBodyResults.


        :param has_issues: The has_issues of this CheckEmailBodyResults.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and has_issues is None:  # noqa: E501
            raise ValueError("Invalid value for `has_issues`, must not be `None`")  # noqa: E501

        self._has_issues = has_issues

    @property
    def link_issues(self):
        """Gets the link_issues of this CheckEmailBodyResults.  # noqa: E501


        :return: The link_issues of this CheckEmailBodyResults.  # noqa: E501
        :rtype: list[LinkIssue]
        """
        return self._link_issues

    @link_issues.setter
    def link_issues(self, link_issues):
        """Sets the link_issues of this CheckEmailBodyResults.


        :param link_issues: The link_issues of this CheckEmailBodyResults.  # noqa: E501
        :type: list[LinkIssue]
        """
        if self.local_vars_configuration.client_side_validation and link_issues is None:  # noqa: E501
            raise ValueError("Invalid value for `link_issues`, must not be `None`")  # noqa: E501

        self._link_issues = link_issues

    @property
    def image_issues(self):
        """Gets the image_issues of this CheckEmailBodyResults.  # noqa: E501


        :return: The image_issues of this CheckEmailBodyResults.  # noqa: E501
        :rtype: list[ImageIssue]
        """
        return self._image_issues

    @image_issues.setter
    def image_issues(self, image_issues):
        """Sets the image_issues of this CheckEmailBodyResults.


        :param image_issues: The image_issues of this CheckEmailBodyResults.  # noqa: E501
        :type: list[ImageIssue]
        """
        if self.local_vars_configuration.client_side_validation and image_issues is None:  # noqa: E501
            raise ValueError("Invalid value for `image_issues`, must not be `None`")  # noqa: E501

        self._image_issues = image_issues

    @property
    def spelling_issues(self):
        """Gets the spelling_issues of this CheckEmailBodyResults.  # noqa: E501


        :return: The spelling_issues of this CheckEmailBodyResults.  # noqa: E501
        :rtype: list[SpellingIssue]
        """
        return self._spelling_issues

    @spelling_issues.setter
    def spelling_issues(self, spelling_issues):
        """Sets the spelling_issues of this CheckEmailBodyResults.


        :param spelling_issues: The spelling_issues of this CheckEmailBodyResults.  # noqa: E501
        :type: list[SpellingIssue]
        """
        if self.local_vars_configuration.client_side_validation and spelling_issues is None:  # noqa: E501
            raise ValueError("Invalid value for `spelling_issues`, must not be `None`")  # noqa: E501

        self._spelling_issues = spelling_issues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckEmailBodyResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckEmailBodyResults):
            return True

        return self.to_dict() != other.to_dict()
