# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class EntityAutomationItemProjection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'inbox_id': 'str',
        'phone_id': 'str',
        'action': 'str',
        'automation_type': 'str',
        'name': 'str',
        'id': 'str'
    }

    attribute_map = {
        'inbox_id': 'inboxId',
        'phone_id': 'phoneId',
        'action': 'action',
        'automation_type': 'automationType',
        'name': 'name',
        'id': 'id'
    }

    def __init__(self, inbox_id=None, phone_id=None, action=None, automation_type=None, name=None, id=None, local_vars_configuration=None):  # noqa: E501
        """EntityAutomationItemProjection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._inbox_id = None
        self._phone_id = None
        self._action = None
        self._automation_type = None
        self._name = None
        self._id = None
        self.discriminator = None

        if inbox_id is not None:
            self.inbox_id = inbox_id
        if phone_id is not None:
            self.phone_id = phone_id
        if action is not None:
            self.action = action
        self.automation_type = automation_type
        if name is not None:
            self.name = name
        self.id = id

    @property
    def inbox_id(self):
        """Gets the inbox_id of this EntityAutomationItemProjection.  # noqa: E501


        :return: The inbox_id of this EntityAutomationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this EntityAutomationItemProjection.


        :param inbox_id: The inbox_id of this EntityAutomationItemProjection.  # noqa: E501
        :type: str
        """

        self._inbox_id = inbox_id

    @property
    def phone_id(self):
        """Gets the phone_id of this EntityAutomationItemProjection.  # noqa: E501


        :return: The phone_id of this EntityAutomationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._phone_id

    @phone_id.setter
    def phone_id(self, phone_id):
        """Sets the phone_id of this EntityAutomationItemProjection.


        :param phone_id: The phone_id of this EntityAutomationItemProjection.  # noqa: E501
        :type: str
        """

        self._phone_id = phone_id

    @property
    def action(self):
        """Gets the action of this EntityAutomationItemProjection.  # noqa: E501


        :return: The action of this EntityAutomationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this EntityAutomationItemProjection.


        :param action: The action of this EntityAutomationItemProjection.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def automation_type(self):
        """Gets the automation_type of this EntityAutomationItemProjection.  # noqa: E501


        :return: The automation_type of this EntityAutomationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._automation_type

    @automation_type.setter
    def automation_type(self, automation_type):
        """Sets the automation_type of this EntityAutomationItemProjection.


        :param automation_type: The automation_type of this EntityAutomationItemProjection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and automation_type is None:  # noqa: E501
            raise ValueError("Invalid value for `automation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["INBOX_FORWARDER", "INBOX_REPLIER", "INBOX_RULESET"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and automation_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `automation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(automation_type, allowed_values)
            )

        self._automation_type = automation_type

    @property
    def name(self):
        """Gets the name of this EntityAutomationItemProjection.  # noqa: E501


        :return: The name of this EntityAutomationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityAutomationItemProjection.


        :param name: The name of this EntityAutomationItemProjection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this EntityAutomationItemProjection.  # noqa: E501


        :return: The id of this EntityAutomationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntityAutomationItemProjection.


        :param id: The id of this EntityAutomationItemProjection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityAutomationItemProjection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityAutomationItemProjection):
            return True

        return self.to_dict() != other.to_dict()
