# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CreateAITransformerMappingOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'ai_transform_id': 'str',
        'entity_id': 'str',
        'entity_type': 'str',
        'content_selector': 'str',
        'trigger_selector': 'str',
        'spread_root_array': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'ai_transform_id': 'aiTransformId',
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'content_selector': 'contentSelector',
        'trigger_selector': 'triggerSelector',
        'spread_root_array': 'spreadRootArray'
    }

    def __init__(self, name=None, ai_transform_id=None, entity_id=None, entity_type=None, content_selector=None, trigger_selector=None, spread_root_array=None, local_vars_configuration=None):  # noqa: E501
        """CreateAITransformerMappingOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._ai_transform_id = None
        self._entity_id = None
        self._entity_type = None
        self._content_selector = None
        self._trigger_selector = None
        self._spread_root_array = None
        self.discriminator = None

        self.name = name
        self.ai_transform_id = ai_transform_id
        self.entity_id = entity_id
        self.entity_type = entity_type
        if content_selector is not None:
            self.content_selector = content_selector
        if trigger_selector is not None:
            self.trigger_selector = trigger_selector
        if spread_root_array is not None:
            self.spread_root_array = spread_root_array

    @property
    def name(self):
        """Gets the name of this CreateAITransformerMappingOptions.  # noqa: E501


        :return: The name of this CreateAITransformerMappingOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAITransformerMappingOptions.


        :param name: The name of this CreateAITransformerMappingOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ai_transform_id(self):
        """Gets the ai_transform_id of this CreateAITransformerMappingOptions.  # noqa: E501


        :return: The ai_transform_id of this CreateAITransformerMappingOptions.  # noqa: E501
        :rtype: str
        """
        return self._ai_transform_id

    @ai_transform_id.setter
    def ai_transform_id(self, ai_transform_id):
        """Sets the ai_transform_id of this CreateAITransformerMappingOptions.


        :param ai_transform_id: The ai_transform_id of this CreateAITransformerMappingOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ai_transform_id is None:  # noqa: E501
            raise ValueError("Invalid value for `ai_transform_id`, must not be `None`")  # noqa: E501

        self._ai_transform_id = ai_transform_id

    @property
    def entity_id(self):
        """Gets the entity_id of this CreateAITransformerMappingOptions.  # noqa: E501


        :return: The entity_id of this CreateAITransformerMappingOptions.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this CreateAITransformerMappingOptions.


        :param entity_id: The entity_id of this CreateAITransformerMappingOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and entity_id is None:  # noqa: E501
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this CreateAITransformerMappingOptions.  # noqa: E501


        :return: The entity_type of this CreateAITransformerMappingOptions.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this CreateAITransformerMappingOptions.


        :param entity_type: The entity_type of this CreateAITransformerMappingOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and entity_type is None:  # noqa: E501
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501
        allowed_values = ["INBOX", "PHONE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and entity_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def content_selector(self):
        """Gets the content_selector of this CreateAITransformerMappingOptions.  # noqa: E501


        :return: The content_selector of this CreateAITransformerMappingOptions.  # noqa: E501
        :rtype: str
        """
        return self._content_selector

    @content_selector.setter
    def content_selector(self, content_selector):
        """Sets the content_selector of this CreateAITransformerMappingOptions.


        :param content_selector: The content_selector of this CreateAITransformerMappingOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["RAW", "BODY", "BODY_ATTACHMENTS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and content_selector not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `content_selector` ({0}), must be one of {1}"  # noqa: E501
                .format(content_selector, allowed_values)
            )

        self._content_selector = content_selector

    @property
    def trigger_selector(self):
        """Gets the trigger_selector of this CreateAITransformerMappingOptions.  # noqa: E501


        :return: The trigger_selector of this CreateAITransformerMappingOptions.  # noqa: E501
        :rtype: str
        """
        return self._trigger_selector

    @trigger_selector.setter
    def trigger_selector(self, trigger_selector):
        """Sets the trigger_selector of this CreateAITransformerMappingOptions.


        :param trigger_selector: The trigger_selector of this CreateAITransformerMappingOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["PER_MESSAGE", "PER_ATTACHMENT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and trigger_selector not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `trigger_selector` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_selector, allowed_values)
            )

        self._trigger_selector = trigger_selector

    @property
    def spread_root_array(self):
        """Gets the spread_root_array of this CreateAITransformerMappingOptions.  # noqa: E501


        :return: The spread_root_array of this CreateAITransformerMappingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._spread_root_array

    @spread_root_array.setter
    def spread_root_array(self, spread_root_array):
        """Sets the spread_root_array of this CreateAITransformerMappingOptions.


        :param spread_root_array: The spread_root_array of this CreateAITransformerMappingOptions.  # noqa: E501
        :type: bool
        """

        self._spread_root_array = spread_root_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAITransformerMappingOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAITransformerMappingOptions):
            return True

        return self.to_dict() != other.to_dict()
