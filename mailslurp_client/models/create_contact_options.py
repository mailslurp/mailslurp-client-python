# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CreateContactOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_name': 'str',
        'last_name': 'str',
        'company': 'str',
        'email_addresses': 'list[str]',
        'tags': 'list[str]',
        'meta_data': 'object',
        'opt_out': 'bool',
        'group_id': 'str',
        'verify_email_addresses': 'bool'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'company': 'company',
        'email_addresses': 'emailAddresses',
        'tags': 'tags',
        'meta_data': 'metaData',
        'opt_out': 'optOut',
        'group_id': 'groupId',
        'verify_email_addresses': 'verifyEmailAddresses'
    }

    def __init__(self, first_name=None, last_name=None, company=None, email_addresses=None, tags=None, meta_data=None, opt_out=None, group_id=None, verify_email_addresses=None, local_vars_configuration=None):  # noqa: E501
        """CreateContactOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_name = None
        self._last_name = None
        self._company = None
        self._email_addresses = None
        self._tags = None
        self._meta_data = None
        self._opt_out = None
        self._group_id = None
        self._verify_email_addresses = None
        self.discriminator = None

        self.first_name = first_name
        self.last_name = last_name
        self.company = company
        self.email_addresses = email_addresses
        self.tags = tags
        self.meta_data = meta_data
        self.opt_out = opt_out
        self.group_id = group_id
        self.verify_email_addresses = verify_email_addresses

    @property
    def first_name(self):
        """Gets the first_name of this CreateContactOptions.  # noqa: E501


        :return: The first_name of this CreateContactOptions.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CreateContactOptions.


        :param first_name: The first_name of this CreateContactOptions.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CreateContactOptions.  # noqa: E501


        :return: The last_name of this CreateContactOptions.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CreateContactOptions.


        :param last_name: The last_name of this CreateContactOptions.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def company(self):
        """Gets the company of this CreateContactOptions.  # noqa: E501


        :return: The company of this CreateContactOptions.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CreateContactOptions.


        :param company: The company of this CreateContactOptions.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def email_addresses(self):
        """Gets the email_addresses of this CreateContactOptions.  # noqa: E501

        Set of email addresses belonging to the contact  # noqa: E501

        :return: The email_addresses of this CreateContactOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this CreateContactOptions.

        Set of email addresses belonging to the contact  # noqa: E501

        :param email_addresses: The email_addresses of this CreateContactOptions.  # noqa: E501
        :type: list[str]
        """

        self._email_addresses = email_addresses

    @property
    def tags(self):
        """Gets the tags of this CreateContactOptions.  # noqa: E501

        Tags that can be used to search and group contacts  # noqa: E501

        :return: The tags of this CreateContactOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateContactOptions.

        Tags that can be used to search and group contacts  # noqa: E501

        :param tags: The tags of this CreateContactOptions.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def meta_data(self):
        """Gets the meta_data of this CreateContactOptions.  # noqa: E501


        :return: The meta_data of this CreateContactOptions.  # noqa: E501
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this CreateContactOptions.


        :param meta_data: The meta_data of this CreateContactOptions.  # noqa: E501
        :type: object
        """

        self._meta_data = meta_data

    @property
    def opt_out(self):
        """Gets the opt_out of this CreateContactOptions.  # noqa: E501

        Has the user explicitly or implicitly opted out of being contacted? If so MailSlurp will ignore them in all actions.  # noqa: E501

        :return: The opt_out of this CreateContactOptions.  # noqa: E501
        :rtype: bool
        """
        return self._opt_out

    @opt_out.setter
    def opt_out(self, opt_out):
        """Sets the opt_out of this CreateContactOptions.

        Has the user explicitly or implicitly opted out of being contacted? If so MailSlurp will ignore them in all actions.  # noqa: E501

        :param opt_out: The opt_out of this CreateContactOptions.  # noqa: E501
        :type: bool
        """

        self._opt_out = opt_out

    @property
    def group_id(self):
        """Gets the group_id of this CreateContactOptions.  # noqa: E501

        Group IDs that contact belongs to  # noqa: E501

        :return: The group_id of this CreateContactOptions.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CreateContactOptions.

        Group IDs that contact belongs to  # noqa: E501

        :param group_id: The group_id of this CreateContactOptions.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def verify_email_addresses(self):
        """Gets the verify_email_addresses of this CreateContactOptions.  # noqa: E501

        Whether to validate contact email address exists  # noqa: E501

        :return: The verify_email_addresses of this CreateContactOptions.  # noqa: E501
        :rtype: bool
        """
        return self._verify_email_addresses

    @verify_email_addresses.setter
    def verify_email_addresses(self, verify_email_addresses):
        """Sets the verify_email_addresses of this CreateContactOptions.

        Whether to validate contact email address exists  # noqa: E501

        :param verify_email_addresses: The verify_email_addresses of this CreateContactOptions.  # noqa: E501
        :type: bool
        """

        self._verify_email_addresses = verify_email_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateContactOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateContactOptions):
            return True

        return self.to_dict() != other.to_dict()
