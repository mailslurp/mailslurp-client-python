# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class GenerateMtaStsRecordOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host': 'str',
        'version': 'str',
        'mode': 'str',
        'ttl': 'int',
        'max_age_seconds': 'int',
        'mx_records': 'list[str]'
    }

    attribute_map = {
        'host': 'host',
        'version': 'version',
        'mode': 'mode',
        'ttl': 'ttl',
        'max_age_seconds': 'maxAgeSeconds',
        'mx_records': 'mxRecords'
    }

    def __init__(self, host=None, version=None, mode=None, ttl=None, max_age_seconds=None, mx_records=None, local_vars_configuration=None):  # noqa: E501
        """GenerateMtaStsRecordOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._host = None
        self._version = None
        self._mode = None
        self._ttl = None
        self._max_age_seconds = None
        self._mx_records = None
        self.discriminator = None

        self.host = host
        self.version = version
        self.mode = mode
        self.ttl = ttl
        self.max_age_seconds = max_age_seconds
        self.mx_records = mx_records

    @property
    def host(self):
        """Gets the host of this GenerateMtaStsRecordOptions.  # noqa: E501


        :return: The host of this GenerateMtaStsRecordOptions.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this GenerateMtaStsRecordOptions.


        :param host: The host of this GenerateMtaStsRecordOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and host is None:  # noqa: E501
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def version(self):
        """Gets the version of this GenerateMtaStsRecordOptions.  # noqa: E501


        :return: The version of this GenerateMtaStsRecordOptions.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GenerateMtaStsRecordOptions.


        :param version: The version of this GenerateMtaStsRecordOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        allowed_values = ["STSv1"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and version not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"  # noqa: E501
                .format(version, allowed_values)
            )

        self._version = version

    @property
    def mode(self):
        """Gets the mode of this GenerateMtaStsRecordOptions.  # noqa: E501


        :return: The mode of this GenerateMtaStsRecordOptions.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GenerateMtaStsRecordOptions.


        :param mode: The mode of this GenerateMtaStsRecordOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mode is None:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["TESTING", "ENFORCE", "NONE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def ttl(self):
        """Gets the ttl of this GenerateMtaStsRecordOptions.  # noqa: E501


        :return: The ttl of this GenerateMtaStsRecordOptions.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this GenerateMtaStsRecordOptions.


        :param ttl: The ttl of this GenerateMtaStsRecordOptions.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and ttl is None:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must not be `None`")  # noqa: E501

        self._ttl = ttl

    @property
    def max_age_seconds(self):
        """Gets the max_age_seconds of this GenerateMtaStsRecordOptions.  # noqa: E501


        :return: The max_age_seconds of this GenerateMtaStsRecordOptions.  # noqa: E501
        :rtype: int
        """
        return self._max_age_seconds

    @max_age_seconds.setter
    def max_age_seconds(self, max_age_seconds):
        """Sets the max_age_seconds of this GenerateMtaStsRecordOptions.


        :param max_age_seconds: The max_age_seconds of this GenerateMtaStsRecordOptions.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and max_age_seconds is None:  # noqa: E501
            raise ValueError("Invalid value for `max_age_seconds`, must not be `None`")  # noqa: E501

        self._max_age_seconds = max_age_seconds

    @property
    def mx_records(self):
        """Gets the mx_records of this GenerateMtaStsRecordOptions.  # noqa: E501


        :return: The mx_records of this GenerateMtaStsRecordOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._mx_records

    @mx_records.setter
    def mx_records(self, mx_records):
        """Sets the mx_records of this GenerateMtaStsRecordOptions.


        :param mx_records: The mx_records of this GenerateMtaStsRecordOptions.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and mx_records is None:  # noqa: E501
            raise ValueError("Invalid value for `mx_records`, must not be `None`")  # noqa: E501

        self._mx_records = mx_records

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateMtaStsRecordOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateMtaStsRecordOptions):
            return True

        return self.to_dict() != other.to_dict()
