# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ImapFlagOperationOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'flag_operation': 'str',
        'flags': 'list[str]'
    }

    attribute_map = {
        'flag_operation': 'flagOperation',
        'flags': 'flags'
    }

    def __init__(self, flag_operation=None, flags=None, local_vars_configuration=None):  # noqa: E501
        """ImapFlagOperationOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._flag_operation = None
        self._flags = None
        self.discriminator = None

        self.flag_operation = flag_operation
        self.flags = flags

    @property
    def flag_operation(self):
        """Gets the flag_operation of this ImapFlagOperationOptions.  # noqa: E501


        :return: The flag_operation of this ImapFlagOperationOptions.  # noqa: E501
        :rtype: str
        """
        return self._flag_operation

    @flag_operation.setter
    def flag_operation(self, flag_operation):
        """Sets the flag_operation of this ImapFlagOperationOptions.


        :param flag_operation: The flag_operation of this ImapFlagOperationOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and flag_operation is None:  # noqa: E501
            raise ValueError("Invalid value for `flag_operation`, must not be `None`")  # noqa: E501
        allowed_values = ["SET_FLAGS", "ADD_FLAGS", "REMOVE_FLAGS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and flag_operation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `flag_operation` ({0}), must be one of {1}"  # noqa: E501
                .format(flag_operation, allowed_values)
            )

        self._flag_operation = flag_operation

    @property
    def flags(self):
        """Gets the flags of this ImapFlagOperationOptions.  # noqa: E501


        :return: The flags of this ImapFlagOperationOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this ImapFlagOperationOptions.


        :param flags: The flags of this ImapFlagOperationOptions.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and flags is None:  # noqa: E501
            raise ValueError("Invalid value for `flags`, must not be `None`")  # noqa: E501

        self._flags = flags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImapFlagOperationOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImapFlagOperationOptions):
            return True

        return self.to_dict() != other.to_dict()
