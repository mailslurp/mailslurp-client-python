# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CreatePortalUserOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'password': 'str',
        'name': 'str',
        'username': 'str',
        'skip_inbox_creation': 'bool',
        'inbox_id': 'str',
        'create_inbox_options': 'CreateInboxDto'
    }

    attribute_map = {
        'password': 'password',
        'name': 'name',
        'username': 'username',
        'skip_inbox_creation': 'skipInboxCreation',
        'inbox_id': 'inboxId',
        'create_inbox_options': 'createInboxOptions'
    }

    def __init__(self, password=None, name=None, username=None, skip_inbox_creation=None, inbox_id=None, create_inbox_options=None, local_vars_configuration=None):  # noqa: E501
        """CreatePortalUserOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._password = None
        self._name = None
        self._username = None
        self._skip_inbox_creation = None
        self._inbox_id = None
        self._create_inbox_options = None
        self.discriminator = None

        if password is not None:
            self.password = password
        if name is not None:
            self.name = name
        if username is not None:
            self.username = username
        if skip_inbox_creation is not None:
            self.skip_inbox_creation = skip_inbox_creation
        if inbox_id is not None:
            self.inbox_id = inbox_id
        if create_inbox_options is not None:
            self.create_inbox_options = create_inbox_options

    @property
    def password(self):
        """Gets the password of this CreatePortalUserOptions.  # noqa: E501


        :return: The password of this CreatePortalUserOptions.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreatePortalUserOptions.


        :param password: The password of this CreatePortalUserOptions.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def name(self):
        """Gets the name of this CreatePortalUserOptions.  # noqa: E501


        :return: The name of this CreatePortalUserOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePortalUserOptions.


        :param name: The name of this CreatePortalUserOptions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this CreatePortalUserOptions.  # noqa: E501


        :return: The username of this CreatePortalUserOptions.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreatePortalUserOptions.


        :param username: The username of this CreatePortalUserOptions.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def skip_inbox_creation(self):
        """Gets the skip_inbox_creation of this CreatePortalUserOptions.  # noqa: E501


        :return: The skip_inbox_creation of this CreatePortalUserOptions.  # noqa: E501
        :rtype: bool
        """
        return self._skip_inbox_creation

    @skip_inbox_creation.setter
    def skip_inbox_creation(self, skip_inbox_creation):
        """Sets the skip_inbox_creation of this CreatePortalUserOptions.


        :param skip_inbox_creation: The skip_inbox_creation of this CreatePortalUserOptions.  # noqa: E501
        :type: bool
        """

        self._skip_inbox_creation = skip_inbox_creation

    @property
    def inbox_id(self):
        """Gets the inbox_id of this CreatePortalUserOptions.  # noqa: E501


        :return: The inbox_id of this CreatePortalUserOptions.  # noqa: E501
        :rtype: str
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this CreatePortalUserOptions.


        :param inbox_id: The inbox_id of this CreatePortalUserOptions.  # noqa: E501
        :type: str
        """

        self._inbox_id = inbox_id

    @property
    def create_inbox_options(self):
        """Gets the create_inbox_options of this CreatePortalUserOptions.  # noqa: E501


        :return: The create_inbox_options of this CreatePortalUserOptions.  # noqa: E501
        :rtype: CreateInboxDto
        """
        return self._create_inbox_options

    @create_inbox_options.setter
    def create_inbox_options(self, create_inbox_options):
        """Sets the create_inbox_options of this CreatePortalUserOptions.


        :param create_inbox_options: The create_inbox_options of this CreatePortalUserOptions.  # noqa: E501
        :type: CreateInboxDto
        """

        self._create_inbox_options = create_inbox_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePortalUserOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreatePortalUserOptions):
            return True

        return self.to_dict() != other.to_dict()
