# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class FakeEmailDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'email_address': 'str',
        'sender': 'Sender',
        'recipients': 'EmailRecipients',
        'subject': 'str',
        'preview': 'str',
        'body': 'str',
        'seen': 'bool',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'email_address': 'emailAddress',
        'sender': 'sender',
        'recipients': 'recipients',
        'subject': 'subject',
        'preview': 'preview',
        'body': 'body',
        'seen': 'seen',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, email_address=None, sender=None, recipients=None, subject=None, preview=None, body=None, seen=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """FakeEmailDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._email_address = None
        self._sender = None
        self._recipients = None
        self._subject = None
        self._preview = None
        self._body = None
        self._seen = None
        self._created_at = None
        self.discriminator = None

        self.id = id
        self.email_address = email_address
        self.sender = sender
        self.recipients = recipients
        if subject is not None:
            self.subject = subject
        if preview is not None:
            self.preview = preview
        self.body = body
        self.seen = seen
        self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this FakeEmailDto.  # noqa: E501


        :return: The id of this FakeEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FakeEmailDto.


        :param id: The id of this FakeEmailDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def email_address(self):
        """Gets the email_address of this FakeEmailDto.  # noqa: E501


        :return: The email_address of this FakeEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this FakeEmailDto.


        :param email_address: The email_address of this FakeEmailDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email_address is None:  # noqa: E501
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def sender(self):
        """Gets the sender of this FakeEmailDto.  # noqa: E501


        :return: The sender of this FakeEmailDto.  # noqa: E501
        :rtype: Sender
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this FakeEmailDto.


        :param sender: The sender of this FakeEmailDto.  # noqa: E501
        :type: Sender
        """

        self._sender = sender

    @property
    def recipients(self):
        """Gets the recipients of this FakeEmailDto.  # noqa: E501


        :return: The recipients of this FakeEmailDto.  # noqa: E501
        :rtype: EmailRecipients
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this FakeEmailDto.


        :param recipients: The recipients of this FakeEmailDto.  # noqa: E501
        :type: EmailRecipients
        """

        self._recipients = recipients

    @property
    def subject(self):
        """Gets the subject of this FakeEmailDto.  # noqa: E501


        :return: The subject of this FakeEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this FakeEmailDto.


        :param subject: The subject of this FakeEmailDto.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def preview(self):
        """Gets the preview of this FakeEmailDto.  # noqa: E501


        :return: The preview of this FakeEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this FakeEmailDto.


        :param preview: The preview of this FakeEmailDto.  # noqa: E501
        :type: str
        """

        self._preview = preview

    @property
    def body(self):
        """Gets the body of this FakeEmailDto.  # noqa: E501


        :return: The body of this FakeEmailDto.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this FakeEmailDto.


        :param body: The body of this FakeEmailDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and body is None:  # noqa: E501
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def seen(self):
        """Gets the seen of this FakeEmailDto.  # noqa: E501


        :return: The seen of this FakeEmailDto.  # noqa: E501
        :rtype: bool
        """
        return self._seen

    @seen.setter
    def seen(self, seen):
        """Sets the seen of this FakeEmailDto.


        :param seen: The seen of this FakeEmailDto.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and seen is None:  # noqa: E501
            raise ValueError("Invalid value for `seen`, must not be `None`")  # noqa: E501

        self._seen = seen

    @property
    def created_at(self):
        """Gets the created_at of this FakeEmailDto.  # noqa: E501


        :return: The created_at of this FakeEmailDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FakeEmailDto.


        :param created_at: The created_at of this FakeEmailDto.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FakeEmailDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FakeEmailDto):
            return True

        return self.to_dict() != other.to_dict()
