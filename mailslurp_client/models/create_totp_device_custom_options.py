# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CreateTotpDeviceCustomOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'secret': 'str',
        'name': 'str',
        'username': 'str',
        'issuer': 'str',
        'digits': 'int',
        'period': 'int',
        'algorithm': 'str'
    }

    attribute_map = {
        'secret': 'secret',
        'name': 'name',
        'username': 'username',
        'issuer': 'issuer',
        'digits': 'digits',
        'period': 'period',
        'algorithm': 'algorithm'
    }

    def __init__(self, secret=None, name=None, username=None, issuer=None, digits=6, period=30, algorithm=None, local_vars_configuration=None):  # noqa: E501
        """CreateTotpDeviceCustomOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._secret = None
        self._name = None
        self._username = None
        self._issuer = None
        self._digits = None
        self._period = None
        self._algorithm = None
        self.discriminator = None

        self.secret = secret
        self.name = name
        self.username = username
        self.issuer = issuer
        self.digits = digits
        self.period = period
        self.algorithm = algorithm

    @property
    def secret(self):
        """Gets the secret of this CreateTotpDeviceCustomOptions.  # noqa: E501

        The base32 encoded secret provided by the identity provider for the TOTP device.  # noqa: E501

        :return: The secret of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this CreateTotpDeviceCustomOptions.

        The base32 encoded secret provided by the identity provider for the TOTP device.  # noqa: E501

        :param secret: The secret of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secret is None:  # noqa: E501
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    @property
    def name(self):
        """Gets the name of this CreateTotpDeviceCustomOptions.  # noqa: E501

        Name for labeling the TOTP device  # noqa: E501

        :return: The name of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTotpDeviceCustomOptions.

        Name for labeling the TOTP device  # noqa: E501

        :param name: The name of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this CreateTotpDeviceCustomOptions.  # noqa: E501

        Optional username for the TOTP device  # noqa: E501

        :return: The username of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateTotpDeviceCustomOptions.

        Optional username for the TOTP device  # noqa: E501

        :param username: The username of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def issuer(self):
        """Gets the issuer of this CreateTotpDeviceCustomOptions.  # noqa: E501

        Optional issuer override for the TOTP device  # noqa: E501

        :return: The issuer of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CreateTotpDeviceCustomOptions.

        Optional issuer override for the TOTP device  # noqa: E501

        :param issuer: The issuer of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def digits(self):
        """Gets the digits of this CreateTotpDeviceCustomOptions.  # noqa: E501

        Optional number of digits in TOTP code  # noqa: E501

        :return: The digits of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :rtype: int
        """
        return self._digits

    @digits.setter
    def digits(self, digits):
        """Sets the digits of this CreateTotpDeviceCustomOptions.

        Optional number of digits in TOTP code  # noqa: E501

        :param digits: The digits of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                digits is not None and digits > 255):  # noqa: E501
            raise ValueError("Invalid value for `digits`, must be a value less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                digits is not None and digits < 0):  # noqa: E501
            raise ValueError("Invalid value for `digits`, must be a value greater than or equal to `0`")  # noqa: E501

        self._digits = digits

    @property
    def period(self):
        """Gets the period of this CreateTotpDeviceCustomOptions.  # noqa: E501

        Optional period in seconds for TOTP code expiration  # noqa: E501

        :return: The period of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CreateTotpDeviceCustomOptions.

        Optional period in seconds for TOTP code expiration  # noqa: E501

        :param period: The period of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def algorithm(self):
        """Gets the algorithm of this CreateTotpDeviceCustomOptions.  # noqa: E501

        Optional algorithm override  # noqa: E501

        :return: The algorithm of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this CreateTotpDeviceCustomOptions.

        Optional algorithm override  # noqa: E501

        :param algorithm: The algorithm of this CreateTotpDeviceCustomOptions.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTotpDeviceCustomOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTotpDeviceCustomOptions):
            return True

        return self.to_dict() != other.to_dict()
