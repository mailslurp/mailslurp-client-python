# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ReputationItemProjection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'recipient': 'str',
        'reputation_type': 'str',
        'id': 'str',
        'severity': 'str',
        'source': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'recipient': 'recipient',
        'reputation_type': 'reputationType',
        'id': 'id',
        'severity': 'severity',
        'source': 'source'
    }

    def __init__(self, created_at=None, recipient=None, reputation_type=None, id=None, severity=None, source=None, local_vars_configuration=None):  # noqa: E501
        """ReputationItemProjection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._recipient = None
        self._reputation_type = None
        self._id = None
        self._severity = None
        self._source = None
        self.discriminator = None

        self.created_at = created_at
        if recipient is not None:
            self.recipient = recipient
        self.reputation_type = reputation_type
        self.id = id
        self.severity = severity
        if source is not None:
            self.source = source

    @property
    def created_at(self):
        """Gets the created_at of this ReputationItemProjection.  # noqa: E501


        :return: The created_at of this ReputationItemProjection.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReputationItemProjection.


        :param created_at: The created_at of this ReputationItemProjection.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def recipient(self):
        """Gets the recipient of this ReputationItemProjection.  # noqa: E501


        :return: The recipient of this ReputationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this ReputationItemProjection.


        :param recipient: The recipient of this ReputationItemProjection.  # noqa: E501
        :type: str
        """

        self._recipient = recipient

    @property
    def reputation_type(self):
        """Gets the reputation_type of this ReputationItemProjection.  # noqa: E501


        :return: The reputation_type of this ReputationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._reputation_type

    @reputation_type.setter
    def reputation_type(self, reputation_type):
        """Sets the reputation_type of this ReputationItemProjection.


        :param reputation_type: The reputation_type of this ReputationItemProjection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and reputation_type is None:  # noqa: E501
            raise ValueError("Invalid value for `reputation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["COMPLAINT", "BOUNCE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and reputation_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `reputation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(reputation_type, allowed_values)
            )

        self._reputation_type = reputation_type

    @property
    def id(self):
        """Gets the id of this ReputationItemProjection.  # noqa: E501


        :return: The id of this ReputationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReputationItemProjection.


        :param id: The id of this ReputationItemProjection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def severity(self):
        """Gets the severity of this ReputationItemProjection.  # noqa: E501


        :return: The severity of this ReputationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ReputationItemProjection.


        :param severity: The severity of this ReputationItemProjection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and severity is None:  # noqa: E501
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["INFO", "WARNING", "DANGER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and severity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source(self):
        """Gets the source of this ReputationItemProjection.  # noqa: E501


        :return: The source of this ReputationItemProjection.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ReputationItemProjection.


        :param source: The source of this ReputationItemProjection.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReputationItemProjection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReputationItemProjection):
            return True

        return self.to_dict() != other.to_dict()
