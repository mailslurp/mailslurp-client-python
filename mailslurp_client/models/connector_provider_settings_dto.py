# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class ConnectorProviderSettingsDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'google_settings': 'ProviderSettings',
        'microsoft_settings': 'ProviderSettings'
    }

    attribute_map = {
        'google_settings': 'googleSettings',
        'microsoft_settings': 'microsoftSettings'
    }

    def __init__(self, google_settings=None, microsoft_settings=None, local_vars_configuration=None):  # noqa: E501
        """ConnectorProviderSettingsDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._google_settings = None
        self._microsoft_settings = None
        self.discriminator = None

        self.google_settings = google_settings
        self.microsoft_settings = microsoft_settings

    @property
    def google_settings(self):
        """Gets the google_settings of this ConnectorProviderSettingsDto.  # noqa: E501


        :return: The google_settings of this ConnectorProviderSettingsDto.  # noqa: E501
        :rtype: ProviderSettings
        """
        return self._google_settings

    @google_settings.setter
    def google_settings(self, google_settings):
        """Sets the google_settings of this ConnectorProviderSettingsDto.


        :param google_settings: The google_settings of this ConnectorProviderSettingsDto.  # noqa: E501
        :type: ProviderSettings
        """
        if self.local_vars_configuration.client_side_validation and google_settings is None:  # noqa: E501
            raise ValueError("Invalid value for `google_settings`, must not be `None`")  # noqa: E501

        self._google_settings = google_settings

    @property
    def microsoft_settings(self):
        """Gets the microsoft_settings of this ConnectorProviderSettingsDto.  # noqa: E501


        :return: The microsoft_settings of this ConnectorProviderSettingsDto.  # noqa: E501
        :rtype: ProviderSettings
        """
        return self._microsoft_settings

    @microsoft_settings.setter
    def microsoft_settings(self, microsoft_settings):
        """Sets the microsoft_settings of this ConnectorProviderSettingsDto.


        :param microsoft_settings: The microsoft_settings of this ConnectorProviderSettingsDto.  # noqa: E501
        :type: ProviderSettings
        """
        if self.local_vars_configuration.client_side_validation and microsoft_settings is None:  # noqa: E501
            raise ValueError("Invalid value for `microsoft_settings`, must not be `None`")  # noqa: E501

        self._microsoft_settings = microsoft_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorProviderSettingsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectorProviderSettingsDto):
            return True

        return self.to_dict() != other.to_dict()
