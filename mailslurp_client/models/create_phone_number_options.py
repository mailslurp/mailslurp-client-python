# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class CreatePhoneNumberOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'phone_country': 'str',
        'name': 'str',
        'description': 'str',
        'schedule': 'str'
    }

    attribute_map = {
        'phone_country': 'phoneCountry',
        'name': 'name',
        'description': 'description',
        'schedule': 'schedule'
    }

    def __init__(self, phone_country=None, name=None, description=None, schedule=None, local_vars_configuration=None):  # noqa: E501
        """CreatePhoneNumberOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._phone_country = None
        self._name = None
        self._description = None
        self._schedule = None
        self.discriminator = None

        self.phone_country = phone_country
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if schedule is not None:
            self.schedule = schedule

    @property
    def phone_country(self):
        """Gets the phone_country of this CreatePhoneNumberOptions.  # noqa: E501


        :return: The phone_country of this CreatePhoneNumberOptions.  # noqa: E501
        :rtype: str
        """
        return self._phone_country

    @phone_country.setter
    def phone_country(self, phone_country):
        """Sets the phone_country of this CreatePhoneNumberOptions.


        :param phone_country: The phone_country of this CreatePhoneNumberOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and phone_country is None:  # noqa: E501
            raise ValueError("Invalid value for `phone_country`, must not be `None`")  # noqa: E501
        allowed_values = ["US", "GB", "AU", "CA", "EE", "HK", "PL", "CH", "PT", "NL", "IL", "SE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and phone_country not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `phone_country` ({0}), must be one of {1}"  # noqa: E501
                .format(phone_country, allowed_values)
            )

        self._phone_country = phone_country

    @property
    def name(self):
        """Gets the name of this CreatePhoneNumberOptions.  # noqa: E501


        :return: The name of this CreatePhoneNumberOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePhoneNumberOptions.


        :param name: The name of this CreatePhoneNumberOptions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreatePhoneNumberOptions.  # noqa: E501


        :return: The description of this CreatePhoneNumberOptions.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePhoneNumberOptions.


        :param description: The description of this CreatePhoneNumberOptions.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def schedule(self):
        """Gets the schedule of this CreatePhoneNumberOptions.  # noqa: E501


        :return: The schedule of this CreatePhoneNumberOptions.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CreatePhoneNumberOptions.


        :param schedule: The schedule of this CreatePhoneNumberOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["MONTHLY", "YEARLY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and schedule not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `schedule` ({0}), must be one of {1}"  # noqa: E501
                .format(schedule, allowed_values)
            )

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePhoneNumberOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreatePhoneNumberOptions):
            return True

        return self.to_dict() != other.to_dict()
