# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository  # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class GenerateStructuredContentEmailOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email_id': 'str',
        'content_selector': 'str',
        'instructions': 'str',
        'output_schema': 'StructuredOutputSchema',
        'transform_id': 'str'
    }

    attribute_map = {
        'email_id': 'emailId',
        'content_selector': 'contentSelector',
        'instructions': 'instructions',
        'output_schema': 'outputSchema',
        'transform_id': 'transformId'
    }

    def __init__(self, email_id=None, content_selector=None, instructions=None, output_schema=None, transform_id=None, local_vars_configuration=None):  # noqa: E501
        """GenerateStructuredContentEmailOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email_id = None
        self._content_selector = None
        self._instructions = None
        self._output_schema = None
        self._transform_id = None
        self.discriminator = None

        self.email_id = email_id
        self.content_selector = content_selector
        self.instructions = instructions
        if output_schema is not None:
            self.output_schema = output_schema
        self.transform_id = transform_id

    @property
    def email_id(self):
        """Gets the email_id of this GenerateStructuredContentEmailOptions.  # noqa: E501

        Email ID to read and pass to AI  # noqa: E501

        :return: The email_id of this GenerateStructuredContentEmailOptions.  # noqa: E501
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id):
        """Sets the email_id of this GenerateStructuredContentEmailOptions.

        Email ID to read and pass to AI  # noqa: E501

        :param email_id: The email_id of this GenerateStructuredContentEmailOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email_id is None:  # noqa: E501
            raise ValueError("Invalid value for `email_id`, must not be `None`")  # noqa: E501

        self._email_id = email_id

    @property
    def content_selector(self):
        """Gets the content_selector of this GenerateStructuredContentEmailOptions.  # noqa: E501

        Content selector to select part of email to operate on  # noqa: E501

        :return: The content_selector of this GenerateStructuredContentEmailOptions.  # noqa: E501
        :rtype: str
        """
        return self._content_selector

    @content_selector.setter
    def content_selector(self, content_selector):
        """Sets the content_selector of this GenerateStructuredContentEmailOptions.

        Content selector to select part of email to operate on  # noqa: E501

        :param content_selector: The content_selector of this GenerateStructuredContentEmailOptions.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"RAW", "BODY", "BODY_ATTACHMENTS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and content_selector not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `content_selector` ({0}), must be one of {1}"  # noqa: E501
                .format(content_selector, allowed_values)
            )

        self._content_selector = content_selector

    @property
    def instructions(self):
        """Gets the instructions of this GenerateStructuredContentEmailOptions.  # noqa: E501

        Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.  # noqa: E501

        :return: The instructions of this GenerateStructuredContentEmailOptions.  # noqa: E501
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this GenerateStructuredContentEmailOptions.

        Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.  # noqa: E501

        :param instructions: The instructions of this GenerateStructuredContentEmailOptions.  # noqa: E501
        :type: str
        """

        self._instructions = instructions

    @property
    def output_schema(self):
        """Gets the output_schema of this GenerateStructuredContentEmailOptions.  # noqa: E501


        :return: The output_schema of this GenerateStructuredContentEmailOptions.  # noqa: E501
        :rtype: StructuredOutputSchema
        """
        return self._output_schema

    @output_schema.setter
    def output_schema(self, output_schema):
        """Sets the output_schema of this GenerateStructuredContentEmailOptions.


        :param output_schema: The output_schema of this GenerateStructuredContentEmailOptions.  # noqa: E501
        :type: StructuredOutputSchema
        """

        self._output_schema = output_schema

    @property
    def transform_id(self):
        """Gets the transform_id of this GenerateStructuredContentEmailOptions.  # noqa: E501

        ID of transformer to apply  # noqa: E501

        :return: The transform_id of this GenerateStructuredContentEmailOptions.  # noqa: E501
        :rtype: str
        """
        return self._transform_id

    @transform_id.setter
    def transform_id(self, transform_id):
        """Sets the transform_id of this GenerateStructuredContentEmailOptions.

        ID of transformer to apply  # noqa: E501

        :param transform_id: The transform_id of this GenerateStructuredContentEmailOptions.  # noqa: E501
        :type: str
        """

        self._transform_id = transform_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateStructuredContentEmailOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateStructuredContentEmailOptions):
            return True

        return self.to_dict() != other.to_dict()
